
motorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003718  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c80  08003c80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c88  08003c88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001044c  2000000c  08003ca0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010458  08003ca0  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c42  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010b9  00000000  00000000  00025c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004f0  00000000  00000000  00026d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000490  00000000  00000000  00027228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ab3  00000000  00000000  000276b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000041aa  00000000  00000000  0004916b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c16cc  00000000  00000000  0004d315  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e9e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001608  00000000  00000000  0010ea5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003888 	.word	0x08003888

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003888 	.word	0x08003888

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0d      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2e>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	; (8000d40 <__NVIC_EnableIRQ+0x3c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <_ZN6CanDrv4InitENS_8BaudRateE>:
	volatile uint8_t indexTxLoad;

	uint16_t recCounter;


	void Init(const BaudRate br)
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
	{

		indexRxStore = indexRxLoad = 0;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		indexTxStore = indexTxLoad = 0;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

		InitHardware(br);
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	4619      	mov	r1, r3
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f805 	bl	8000d84 <_ZN6CanDrv12InitHardwareENS_8BaudRateE>
	}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <_ZN6CanDrv12InitHardwareENS_8BaudRateE>:

	void InitHardware(const BaudRate br)
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	70fb      	strb	r3, [r7, #3]
	{
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000d90:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x18c>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a5e      	ldr	r2, [pc, #376]	; (8000f10 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x18c>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8000d9c:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x18c>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4a5b      	ldr	r2, [pc, #364]	; (8000f10 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x18c>)
 8000da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da6:	6413      	str	r3, [r2, #64]	; 0x40

	    // PD0, PD1 -> CAN: Rx, Tx
		GPIOD->AFR[0] |= (uint32_t) 9 << 0*4 | (uint32_t) 9 << 1*4;
 8000da8:	4b5a      	ldr	r3, [pc, #360]	; (8000f14 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x190>)
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	4a59      	ldr	r2, [pc, #356]	; (8000f14 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x190>)
 8000dae:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 8000db2:	6213      	str	r3, [r2, #32]
		GPIOD->MODER |=  GPIO_MODER_MODER0_1 | GPIO_MODER_MODER1_1;
 8000db4:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x190>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a56      	ldr	r2, [pc, #344]	; (8000f14 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x190>)
 8000dba:	f043 030a 	orr.w	r3, r3, #10
 8000dbe:	6013      	str	r3, [r2, #0]
		GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1 | GPIO_OSPEEDER_OSPEEDR1_1;
 8000dc0:	4b54      	ldr	r3, [pc, #336]	; (8000f14 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x190>)
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	4a53      	ldr	r2, [pc, #332]	; (8000f14 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x190>)
 8000dc6:	f043 030a 	orr.w	r3, r3, #10
 8000dca:	6093      	str	r3, [r2, #8]
		GPIOD->ODR |= GPIO_ODR_ODR_1;
 8000dcc:	4b51      	ldr	r3, [pc, #324]	; (8000f14 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x190>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	4a50      	ldr	r2, [pc, #320]	; (8000f14 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x190>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	6153      	str	r3, [r2, #20]
		GPIOD->PUPDR |= GPIO_PUPDR_PUPDR0_0 | GPIO_PUPDR_PUPDR1_0;
 8000dd8:	4b4e      	ldr	r3, [pc, #312]	; (8000f14 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x190>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	4a4d      	ldr	r2, [pc, #308]	; (8000f14 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x190>)
 8000dde:	f043 0305 	orr.w	r3, r3, #5
 8000de2:	60d3      	str	r3, [r2, #12]

		// switch to initialization mode
		CAN1->MCR &= ~CAN_MCR_SLEEP;
 8000de4:	4b4c      	ldr	r3, [pc, #304]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a4b      	ldr	r2, [pc, #300]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000dea:	f023 0302 	bic.w	r3, r3, #2
 8000dee:	6013      	str	r3, [r2, #0]
		CAN1->MCR |= CAN_MCR_INRQ;
 8000df0:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a48      	ldr	r2, [pc, #288]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6013      	str	r3, [r2, #0]
		CAN1->MCR |= CAN_MCR_ABOM;
 8000dfc:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a45      	ldr	r2, [pc, #276]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e06:	6013      	str	r3, [r2, #0]
		while (!(CAN1->MSR & CAN_MSR_INAK)) {};
 8000e08:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf0c      	ite	eq
 8000e14:	2301      	moveq	r3, #1
 8000e16:	2300      	movne	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d000      	beq.n	8000e20 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x9c>
 8000e1e:	e7f3      	b.n	8000e08 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x84>

		//CAN1->MCR |= CAN_MCR_NART;
		CAN1->BTR &= ~(CAN_BTR_SJW | CAN_BTR_TS1 | CAN_BTR_TS2 | CAN_BTR_BRP);
 8000e20:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e22:	69da      	ldr	r2, [r3, #28]
 8000e24:	493c      	ldr	r1, [pc, #240]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e26:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x198>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61cb      	str	r3, [r1, #28]

		// set baudrate
		switch (br)
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d108      	bne.n	8000e44 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0xc0>
		{
			case B1M:
				CAN1->BTR |= ((11-1) << 16) | ((2-1) << 20) | (3-1);
 8000e32:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e38:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	61d3      	str	r3, [r2, #28]
			break;
 8000e42:	e008      	b.n	8000e56 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0xd2>

			case B125K:
			default:
				CAN1->BTR |= ((13-1) << 16) | ((2-1) << 20) | (21-1);
 8000e44:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	4a33      	ldr	r2, [pc, #204]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e4a:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000e4e:	f043 0314 	orr.w	r3, r3, #20
 8000e52:	61d3      	str	r3, [r2, #28]
			break;
 8000e54:	bf00      	nop

		}

		CAN1->IER |= CAN_IER_FMPIE0;
 8000e56:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6153      	str	r3, [r2, #20]

		//begin filter initialization
		CAN1->FMR |= CAN_FMR_FINIT;
 8000e62:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e68:	4a2b      	ldr	r2, [pc, #172]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

		//reset FA1R
		CAN1->FA1R = 0;
 8000e72:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		//single 32 bit scale configuration
		CAN1->FS1R = CAN_FS1R_FSC0;
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

		//mask mode
		CAN1->FM1R &= ~CAN_FM1R_FBM0;
 8000e82:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e88:	4a23      	ldr	r2, [pc, #140]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e8a:	f023 0301 	bic.w	r3, r3, #1
 8000e8e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

		//assigned to FIFO1
		CAN1->FFA1R &= ~CAN_FFA1R_FFA0;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000e98:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000e9a:	f023 0301 	bic.w	r3, r3, #1
 8000e9e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

		//activate filter
		CAN1->FA1R = CAN_FA1R_FACT0;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

		//set masks
		CAN1->sFilterRegister[0].FR1 = 0x00000000;
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = 0x00000000;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244

		//end filter initialization
		CAN1->FMR &= ~CAN_FMR_FINIT;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000ebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ec0:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

		//Request switching off initialization mode
		CAN1->MCR &= ~CAN_MCR_INRQ;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000ed0:	f023 0301 	bic.w	r3, r3, #1
 8000ed4:	6013      	str	r3, [r2, #0]
		while (CAN1->MSR & CAN_MSR_INAK) {};
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf14      	ite	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	2300      	moveq	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d000      	beq.n	8000eee <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x16a>
 8000eec:	e7f3      	b.n	8000ed6 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x152>

		CAN1->IER |= CAN_IER_TMEIE;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <_ZN6CanDrv12InitHardwareENS_8BaudRateE+0x194>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6153      	str	r3, [r2, #20]

		NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000efa:	2013      	movs	r0, #19
 8000efc:	f7ff ff02 	bl	8000d04 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f00:	2014      	movs	r0, #20
 8000f02:	f7ff feff 	bl	8000d04 <__NVIC_EnableIRQ>

	}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40006400 	.word	0x40006400
 8000f1c:	fc80fc00 	.word	0xfc80fc00

08000f20 <_ZN6CanDrv11SendTriggerEv>:

	void SendTrigger()
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	{
		CAN1->sTxMailBox[freeMailbox].TIR |= CAN_TI0R_TXRQ;
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <_ZN6CanDrv11SendTriggerEv+0x38>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	3318      	adds	r3, #24
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	4413      	add	r3, r2
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <_ZN6CanDrv11SendTriggerEv+0x38>)
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f043 0201 	orr.w	r2, r3, #1
 8000f42:	f100 0318 	add.w	r3, r0, #24
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	440b      	add	r3, r1
 8000f4a:	601a      	str	r2, [r3, #0]
	}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	40006400 	.word	0x40006400

08000f5c <_ZN6CanDrv17SelectFreeMailboxEv>:

	bool SelectFreeMailbox()
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	{
		uint32_t mask = CAN_TSR_TME0;
 8000f64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f68:	617b      	str	r3, [r7, #20]
		volatile uint32_t status = CAN1->TSR;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <_ZN6CanDrv17SelectFreeMailboxEv+0x5c>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	60fb      	str	r3, [r7, #12]

		// check if free mailbox is found!
		for(size_t mailboxNumber = 0; mailboxNumber < 2; mailboxNumber++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d816      	bhi.n	8000fa8 <_ZN6CanDrv17SelectFreeMailboxEv+0x4c>
		{
			if (status & mask)
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf14      	ite	ne
 8000f84:	2301      	movne	r3, #1
 8000f86:	2300      	moveq	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <_ZN6CanDrv17SelectFreeMailboxEv+0x3e>
			{
				freeMailbox = mailboxNumber;
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	701a      	strb	r2, [r3, #0]
				return true;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e007      	b.n	8000faa <_ZN6CanDrv17SelectFreeMailboxEv+0x4e>
			}
			mask <<= 1;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
		for(size_t mailboxNumber = 0; mailboxNumber < 2; mailboxNumber++)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	e7e5      	b.n	8000f74 <_ZN6CanDrv17SelectFreeMailboxEv+0x18>
		}
		return false;
 8000fa8:	2300      	movs	r3, #0
	}
 8000faa:	4618      	mov	r0, r3
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40006400 	.word	0x40006400

08000fbc <_ZN6CanDrv7ReceiveEv>:

	void Receive()
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	{
		while (CAN1->RF0R & CAN_RF0R_FMP0)
 8000fc4:	4b35      	ldr	r3, [pc, #212]	; (800109c <_ZN6CanDrv7ReceiveEv+0xe0>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf14      	ite	ne
 8000fd0:	2301      	movne	r3, #1
 8000fd2:	2300      	moveq	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d059      	beq.n	800108e <_ZN6CanDrv7ReceiveEv+0xd2>
		{
			uint32_t data;

			data = CAN1->sFIFOMailBox[0].RIR;
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <_ZN6CanDrv7ReceiveEv+0xe0>)
 8000fdc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000fe0:	60fb      	str	r3, [r7, #12]
			dataRx[indexRxStore].index = data >> 21;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	0d5a      	lsrs	r2, r3, #21
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	0103      	lsls	r3, r0, #4
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	601a      	str	r2, [r3, #0]

			data = CAN1->sFIFOMailBox[0].RDTR;
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <_ZN6CanDrv7ReceiveEv+0xe0>)
 8000ffc:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001000:	60fb      	str	r3, [r7, #12]
			dataRx[indexRxStore].dataNumber = (uint8_t) (data & CAN_RDT0R_DLC);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	f892 240c 	ldrb.w	r2, [r2, #1036]	; 0x40c
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	4610      	mov	r0, r2
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	b2d9      	uxtb	r1, r3
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	0103      	lsls	r3, r0, #4
 800101a:	4413      	add	r3, r2
 800101c:	3310      	adds	r3, #16
 800101e:	460a      	mov	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]

			data = CAN1->sFIFOMailBox[0].RDLR;
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <_ZN6CanDrv7ReceiveEv+0xe0>)
 8001024:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8001028:	60fb      	str	r3, [r7, #12]
			dataRx[indexRxStore].data[0] = data;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8001030:	b2db      	uxtb	r3, r3
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	4413      	add	r3, r2
 8001038:	3308      	adds	r3, #8
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	601a      	str	r2, [r3, #0]

			data = CAN1->sFIFOMailBox[0].RDHR;
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <_ZN6CanDrv7ReceiveEv+0xe0>)
 8001040:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001044:	60fb      	str	r3, [r7, #12]
			dataRx[indexRxStore].data[1] = data;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800104c:	b2db      	uxtb	r3, r3
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	4413      	add	r3, r2
 8001054:	330c      	adds	r3, #12
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	601a      	str	r2, [r3, #0]

			CAN1->RF0R |= CAN_RF0R_RFOM0;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <_ZN6CanDrv7ReceiveEv+0xe0>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <_ZN6CanDrv7ReceiveEv+0xe0>)
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	60d3      	str	r3, [r2, #12]

			indexRxStore++;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3301      	adds	r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			indexRxStore &= queueSizeMask;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f003 031f 	and.w	r3, r3, #31
 8001084:	b2da      	uxtb	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		while (CAN1->RF0R & CAN_RF0R_FMP0)
 800108c:	e79a      	b.n	8000fc4 <_ZN6CanDrv7ReceiveEv+0x8>
		}
	}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40006400 	.word	0x40006400

080010a0 <_ZN6CanDrv8GetRxMsgEv>:
	/******************************************************************************/


	bool GetRxMsg()
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	{
		if ((indexRxStore-indexRxLoad) & queueSizeMask)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bf14      	ite	ne
 80010c4:	2301      	movne	r3, #1
 80010c6:	2300      	moveq	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d01b      	beq.n	8001106 <_ZN6CanDrv8GetRxMsgEv+0x66>
		{
			rxMsg = &dataRx[indexRxLoad++];
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	b2d1      	uxtb	r1, r2
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	f882 140d 	strb.w	r1, [r2, #1037]	; 0x40d
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	1d1a      	adds	r2, r3, #4
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			indexRxLoad &= queueSizeMask;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f003 031f 	and.w	r3, r3, #31
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
			return true;
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <_ZN6CanDrv8GetRxMsgEv+0x68>
		}
		else
			return false;
 8001106:	2300      	movs	r3, #0
	}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_ZN6CanDrv8SetTxMsgER6CanMsg>:

	void SetTxMsg(CanMsg &m)
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	{
		//DataCopy((uint8_t*)&dataTx[indexTxStore++], (uint8_t*)&m, sizeof(CanMsg));
		memcpy((void*)&dataTx[indexTxStore++], (void*)&m, sizeof(CanMsg));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8001124:	b2db      	uxtb	r3, r3
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	b2d1      	uxtb	r1, r2
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	f882 140e 	strb.w	r1, [r2, #1038]	; 0x40e
 8001130:	3320      	adds	r3, #32
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	3304      	adds	r3, #4
 800113a:	2210      	movs	r2, #16
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fb8e 	bl	8003860 <memcpy>
		indexTxStore &= queueSizeMask;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	b2da      	uxtb	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
	}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_ZN6CanDrv8GetTxMsgEv>:

	bool GetTxMsg()
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	{
		if ((indexTxStore-indexTxLoad) & queueSizeMask)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 8001176:	b2db      	uxtb	r3, r3
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f003 031f 	and.w	r3, r3, #31
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf14      	ite	ne
 8001184:	2301      	movne	r3, #1
 8001186:	2300      	moveq	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00d      	beq.n	80011aa <_ZN6CanDrv8GetTxMsgEv+0x4a>
		{
			txMsg = &dataTx[indexTxLoad];
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 8001194:	b2db      	uxtb	r3, r3
 8001196:	3320      	adds	r3, #32
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	1d1a      	adds	r2, r3, #4
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
			return true;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <_ZN6CanDrv8GetTxMsgEv+0x4c>
		}
		else
			return false;
 80011aa:	2300      	movs	r3, #0
	}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_ZN6CanDrv9SendStartEv>:

	bool SendStart()
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	{
		if (GetTxMsg())
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffcd 	bl	8001160 <_ZN6CanDrv8GetTxMsgEv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d073      	beq.n	80012b4 <_ZN6CanDrv9SendStartEv+0xfc>
		{
			if (SelectFreeMailbox())
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fec5 	bl	8000f5c <_ZN6CanDrv17SelectFreeMailboxEv>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d06b      	beq.n	80012b0 <_ZN6CanDrv9SendStartEv+0xf8>
			{
				CAN1->sTxMailBox[freeMailbox].TIR = txMsg->index << 21;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4937      	ldr	r1, [pc, #220]	; (80012c0 <_ZN6CanDrv9SendStartEv+0x108>)
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	4610      	mov	r0, r2
 80011e8:	055a      	lsls	r2, r3, #21
 80011ea:	f100 0318 	add.w	r3, r0, #24
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	440b      	add	r3, r1
 80011f2:	601a      	str	r2, [r3, #0]
				CAN1->sTxMailBox[freeMailbox].TDLR = txMsg->data[0];
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80011fa:	4931      	ldr	r1, [pc, #196]	; (80012c0 <_ZN6CanDrv9SendStartEv+0x108>)
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	7812      	ldrb	r2, [r2, #0]
 8001200:	4610      	mov	r0, r2
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	0103      	lsls	r3, r0, #4
 8001206:	440b      	add	r3, r1
 8001208:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800120c:	601a      	str	r2, [r3, #0]
				CAN1->sTxMailBox[freeMailbox].TDHR = txMsg->data[1];
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001214:	492a      	ldr	r1, [pc, #168]	; (80012c0 <_ZN6CanDrv9SendStartEv+0x108>)
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	4610      	mov	r0, r2
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	0103      	lsls	r3, r0, #4
 8001220:	440b      	add	r3, r1
 8001222:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001226:	601a      	str	r2, [r3, #0]
				CAN1->sTxMailBox[freeMailbox].TDTR &= ~0xF;
 8001228:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <_ZN6CanDrv9SendStartEv+0x108>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	3318      	adds	r3, #24
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	3304      	adds	r3, #4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4921      	ldr	r1, [pc, #132]	; (80012c0 <_ZN6CanDrv9SendStartEv+0x108>)
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	4610      	mov	r0, r2
 8001240:	f023 020f 	bic.w	r2, r3, #15
 8001244:	f100 0318 	add.w	r3, r0, #24
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	440b      	add	r3, r1
 800124c:	3304      	adds	r3, #4
 800124e:	601a      	str	r2, [r3, #0]
				CAN1->sTxMailBox[freeMailbox].TDTR |= txMsg->dataNumber;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001256:	7b1b      	ldrb	r3, [r3, #12]
 8001258:	b2d9      	uxtb	r1, r3
 800125a:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <_ZN6CanDrv9SendStartEv+0x108>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	3318      	adds	r3, #24
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	4413      	add	r3, r2
 8001266:	3304      	adds	r3, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	460c      	mov	r4, r1
 800126c:	4914      	ldr	r1, [pc, #80]	; (80012c0 <_ZN6CanDrv9SendStartEv+0x108>)
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	4610      	mov	r0, r2
 8001274:	ea43 0204 	orr.w	r2, r3, r4
 8001278:	f100 0318 	add.w	r3, r0, #24
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	440b      	add	r3, r1
 8001280:	3304      	adds	r3, #4
 8001282:	601a      	str	r2, [r3, #0]
				indexTxLoad++;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 800128a:	b2db      	uxtb	r3, r3
 800128c:	3301      	adds	r3, #1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
				indexTxLoad &= queueSizeMask;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
				SendTrigger();
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fe38 	bl	8000f20 <_ZN6CanDrv11SendTriggerEv>
			}
			return true;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <_ZN6CanDrv9SendStartEv+0xfe>
		}
		return false;
 80012b4:	2300      	movs	r3, #0
	}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	40006400 	.word	0x40006400

080012c4 <_ZN6CanDrv8IrqWriteEv>:

	void IrqWrite()
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	{
		if (!SendStart())
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff73 	bl	80011b8 <_ZN6CanDrv9SendStartEv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f083 0301 	eor.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d032      	beq.n	8001344 <_ZN6CanDrv8IrqWriteEv+0x80>
		{
			if (CAN1->TSR & CAN_TSR_RQCP0)
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <_ZN6CanDrv8IrqWriteEv+0x88>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	2300      	moveq	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <_ZN6CanDrv8IrqWriteEv+0x3c>
			{
				CAN1->TSR |= CAN_TSR_RQCP0;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <_ZN6CanDrv8IrqWriteEv+0x88>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <_ZN6CanDrv8IrqWriteEv+0x88>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6093      	str	r3, [r2, #8]
			}
			if (CAN1->TSR & CAN_TSR_RQCP1)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <_ZN6CanDrv8IrqWriteEv+0x88>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	bf14      	ite	ne
 800130c:	2301      	movne	r3, #1
 800130e:	2300      	moveq	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <_ZN6CanDrv8IrqWriteEv+0x5e>
			{
				CAN1->TSR |= CAN_TSR_RQCP1;
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <_ZN6CanDrv8IrqWriteEv+0x88>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	4a0c      	ldr	r2, [pc, #48]	; (800134c <_ZN6CanDrv8IrqWriteEv+0x88>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	6093      	str	r3, [r2, #8]
			}
			if (CAN1->TSR & CAN_TSR_RQCP2)
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <_ZN6CanDrv8IrqWriteEv+0x88>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf14      	ite	ne
 800132e:	2301      	movne	r3, #1
 8001330:	2300      	moveq	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <_ZN6CanDrv8IrqWriteEv+0x80>
			{
				CAN1->TSR |= CAN_TSR_RQCP2;
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <_ZN6CanDrv8IrqWriteEv+0x88>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4a03      	ldr	r2, [pc, #12]	; (800134c <_ZN6CanDrv8IrqWriteEv+0x88>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6093      	str	r3, [r2, #8]
			}
		}
	}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40006400 	.word	0x40006400

08001350 <_ZN6CanDrv7IrqReadEv>:

	void IrqRead()
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	{
		Receive();
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fe2f 	bl	8000fbc <_ZN6CanDrv7ReceiveEv>
	}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_Z11SetSynchObjP6CanDrv>:


};

inline void SetSynchObj(CanDrv * drv)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	CanMsg canMsg;

	canMsg.index = 0x80;
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	60bb      	str	r3, [r7, #8]
	canMsg.data[0] = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
	canMsg.data[1] = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
	canMsg.dataNumber = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	753b      	strb	r3, [r7, #20]

	drv->SetTxMsg(canMsg);
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4619      	mov	r1, r3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fec5 	bl	8001114 <_ZN6CanDrv8SetTxMsgER6CanMsg>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_Z8DataCopyPhS_t>:
#pragma once
#include "stddef.h"

inline void DataCopy(uint8_t* dest, uint8_t* source, uint16_t size)
{
 8001392:	b480      	push	{r7}
 8001394:	b087      	sub	sp, #28
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	4613      	mov	r3, r2
 800139e:	80fb      	strh	r3, [r7, #6]
	for(size_t i = 0; i < size; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d20b      	bcs.n	80013c4 <_Z8DataCopyPhS_t+0x32>
		dest[i] = source[i];
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	441a      	add	r2, r3
 80013b2:	68f9      	ldr	r1, [r7, #12]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	440b      	add	r3, r1
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < size; i++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e7ef      	b.n	80013a4 <_Z8DataCopyPhS_t+0x12>
}
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_ZN3SdoC1EP6CanDrvt>:
	volatile int16_t	trials;

	uint32_t mailboxData[2];
	uint8_t id;

	Sdo(CanDrv * canDrv, uint16_t id)
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	4613      	mov	r3, r2
 80013dc:	80fb      	strh	r3, [r7, #6]
	{
		completed = false;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
		cmdNumber = 0;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
		this->id = id;
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
		this->canDrv = canDrv;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	601a      	str	r2, [r3, #0]
		cmdIndex = 0;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
		idWr = id + idWrOffset;
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800140c:	b29a      	uxth	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	809a      	strh	r2, [r3, #4]
		idRd = id + idRdOffset;
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8001418:	b29a      	uxth	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	80da      	strh	r2, [r3, #6]
	}
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_ZN3Sdo5ResetEv>:

	void Reset()
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	{
		time = cmd[cmdIndex].timeout;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8b3 318c 	ldrh.w	r3, [r3, #396]	; 0x18c
 800143a:	b29b      	uxth	r3, r3
 800143c:	4619      	mov	r1, r3
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	440b      	add	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3310      	adds	r3, #16
 800144c:	881a      	ldrh	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
		//mask = m->mbox_tx_mask;
	}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_ZN3Sdo11PushCommandERK6SdoCmd>:

	void PushCommand(const SdoCmd &c)
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	{
		DataCopy((uint8_t*)&cmd[cmdNumber], (uint8_t*)&c, sizeof(SdoCmd));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8b3 318e 	ldrh.w	r3, [r3, #398]	; 0x18e
 8001470:	b29b      	uxth	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	3308      	adds	r3, #8
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	220c      	movs	r2, #12
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff83 	bl	8001392 <_Z8DataCopyPhS_t>
		//memcpy((void*)&cmd[cmdNumber], (void*)&c, sizeof(SdoCmd));
		cmdNumber++;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8b3 318e 	ldrh.w	r3, [r3, #398]	; 0x18e
 8001492:	b29b      	uxth	r3, r3
 8001494:	3301      	adds	r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
		cmdNumber &= stackSize-1;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8b3 318e 	ldrh.w	r3, [r3, #398]	; 0x18e
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f003 031f 	and.w	r3, r3, #31
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
	}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_ZN3Sdo11PrepareDataEv>:

	// wype�nienie skrzynki trescia
	void PrepareData()
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b088      	sub	sp, #32
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	{
		SdoCmd * c = &cmd[cmdIndex];
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8b3 318c 	ldrh.w	r3, [r3, #396]	; 0x18c
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	3308      	adds	r3, #8
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	61fb      	str	r3, [r7, #28]

		mailboxData[0] = *(uint32_t*)&c->type;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		mailboxData[1] = *(uint32_t*)c->data;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

		//canDrv->dataTx
		time = c->timeout;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	891b      	ldrh	r3, [r3, #8]
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
		trials = c->trials;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001504:	b21a      	sxth	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
		transmitted = false;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
		received = false;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193

		CanMsg canMsg;

		canMsg.index = idWr;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	60fb      	str	r3, [r7, #12]
		canMsg.data[0] = mailboxData[0];
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8001528:	613b      	str	r3, [r7, #16]
		canMsg.data[1] = mailboxData[1];
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001530:	617b      	str	r3, [r7, #20]
		canMsg.dataNumber = 8;
 8001532:	2308      	movs	r3, #8
 8001534:	763b      	strb	r3, [r7, #24]

		canDrv->SetTxMsg(canMsg);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f107 020c 	add.w	r2, r7, #12
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fde7 	bl	8001114 <_ZN6CanDrv8SetTxMsgER6CanMsg>
	}
 8001546:	bf00      	nop
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_ZN3Sdo13StartSequenceEv>:

	void StartSequence()
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
	{
		cmdIndex = 0;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
		startTrigger = true;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		PrepareData();
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa7 	bl	80014ba <_ZN3Sdo11PrepareDataEv>
		completed = false;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_ZN3Sdo16StackWriteUpdateEv>:
	{
		if (++cmdIndex < cmdNumber) PrepareData();
		else completed = true;
	}

	bool StackWriteUpdate()
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	{
		bool newCmd = false;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
		if (completed) return false;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <_ZN3Sdo16StackWriteUpdateEv+0x1c>
 8001594:	2300      	movs	r3, #0
 8001596:	e081      	b.n	800169c <_ZN3Sdo16StackWriteUpdateEv+0x120>
		if (!trials) return false;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800159e:	b21b      	sxth	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf0c      	ite	eq
 80015a4:	2301      	moveq	r3, #1
 80015a6:	2300      	movne	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <_ZN3Sdo16StackWriteUpdateEv+0x36>
 80015ae:	2300      	movs	r3, #0
 80015b0:	e074      	b.n	800169c <_ZN3Sdo16StackWriteUpdateEv+0x120>

		if (!startTrigger)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f083 0301 	eor.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <_ZN3Sdo16StackWriteUpdateEv+0x5a>
		{
			startTrigger = false;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
			completed = false;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 80015d4:	e061      	b.n	800169a <_ZN3Sdo16StackWriteUpdateEv+0x11e>
		}
		else
		{
			// czy potwierdzono przeslanie danych?
			if (received)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d02c      	beq.n	800163c <_ZN3Sdo16StackWriteUpdateEv+0xc0>
			{
				cmdIndex++;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f8b3 318c 	ldrh.w	r3, [r3, #396]	; 0x18c
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	3301      	adds	r3, #1
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
				cmdIndex %= stackSize;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f8b3 318c 	ldrh.w	r3, [r3, #396]	; 0x18c
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	b29a      	uxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
				if (cmdIndex < cmdNumber)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f8b3 318c 	ldrh.w	r3, [r3, #396]	; 0x18c
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f8b3 318e 	ldrh.w	r3, [r3, #398]	; 0x18e
 8001616:	b29b      	uxth	r3, r3
 8001618:	429a      	cmp	r2, r3
 800161a:	bf34      	ite	cc
 800161c:	2301      	movcc	r3, #1
 800161e:	2300      	movcs	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <_ZN3Sdo16StackWriteUpdateEv+0xb6>
				{
					PrepareData();
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff47 	bl	80014ba <_ZN3Sdo11PrepareDataEv>
					newCmd = true;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e033      	b.n	800169a <_ZN3Sdo16StackWriteUpdateEv+0x11e>
				}
				else
				{
					completed = true;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 800163a:	e02e      	b.n	800169a <_ZN3Sdo16StackWriteUpdateEv+0x11e>
				}
			}
			else
			{
				// sprawdzenie warunku czasu
				if (!(--time))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001642:	b29b      	uxth	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	b29b      	uxth	r3, r3
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	4619      	mov	r1, r3
 800164c:	f8a2 1196 	strh.w	r1, [r2, #406]	; 0x196
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01d      	beq.n	800169a <_ZN3Sdo16StackWriteUpdateEv+0x11e>
				{
					Reset();
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fee4 	bl	800142c <_ZN3Sdo5ResetEv>
					PrepareData();
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff28 	bl	80014ba <_ZN3Sdo11PrepareDataEv>
					newCmd = true;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
					if (trials > 0) trials--;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001674:	b21b      	sxth	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	bfcc      	ite	gt
 800167a:	2301      	movgt	r3, #1
 800167c:	2300      	movle	r3, #0
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00a      	beq.n	800169a <_ZN3Sdo16StackWriteUpdateEv+0x11e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800168a:	b21b      	sxth	r3, r3
 800168c:	b29b      	uxth	r3, r3
 800168e:	3b01      	subs	r3, #1
 8001690:	b29b      	uxth	r3, r3
 8001692:	b21a      	sxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
				}
			}
		}
		return newCmd;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
	}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZN3PdoC1EP6CanDrvt>:

	enum PdoObj {Pdo1 = 0, Pdo2 = 1, Pdo3 = 2, Pdo4 = 3};
	PdoCmd cmdTx[4];
	PdoCmd cmdRx[4];

	Pdo(CanDrv * canDrv, uint16_t id) : canDrv(canDrv)
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	4613      	mov	r3, r2
 80016b0:	80fb      	strh	r3, [r7, #6]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	605a      	str	r2, [r3, #4]
	{
		cmdRx[Pdo1].index = id + CanOpenObjects::pdo1Rx;
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016be:	b29a      	uxth	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	869a      	strh	r2, [r3, #52]	; 0x34
		cmdRx[Pdo2].index = id + CanOpenObjects::pdo2Rx;
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f8a3 203f 	strh.w	r2, [r3, #63]	; 0x3f
		cmdRx[Pdo3].index = id + CanOpenObjects::pdo3Rx;
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		cmdRx[Pdo4].index = id + CanOpenObjects::pdo4Rx;
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f8a3 2055 	strh.w	r2, [r3, #85]	; 0x55

		cmdTx[Pdo1].index = id + CanOpenObjects::pdo1Tx;
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	811a      	strh	r2, [r3, #8]
		cmdTx[Pdo2].index = id + CanOpenObjects::pdo2Tx;
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f8a3 2013 	strh.w	r2, [r3, #19]
		cmdTx[Pdo3].index = id + CanOpenObjects::pdo3Tx;
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	83da      	strh	r2, [r3, #30]
		cmdTx[Pdo4].index = id + CanOpenObjects::pdo4Tx;
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8a3 2029 	strh.w	r2, [r3, #41]	; 0x29
	};
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_ZN3Pdo4SendENS_6PdoObjE>:

	void Send(PdoObj pdoObj)
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
	{
		CanMsg canMsg;

		canMsg.index = cmdTx[pdoObj].index;
 800173c:	78fa      	ldrb	r2, [r7, #3]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	440b      	add	r3, r1
 800174c:	3308      	adds	r3, #8
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	60bb      	str	r3, [r7, #8]
		canMsg.data[0] = cmdTx[pdoObj].data0;
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	440b      	add	r3, r1
 8001764:	3308      	adds	r3, #8
 8001766:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800176a:	60fb      	str	r3, [r7, #12]
		canMsg.data[1] = cmdTx[pdoObj].data1;
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	440b      	add	r3, r1
 800177c:	3308      	adds	r3, #8
 800177e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8001782:	613b      	str	r3, [r7, #16]
		canMsg.dataNumber = cmdTx[pdoObj].size;
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	440b      	add	r3, r1
 8001794:	3312      	adds	r3, #18
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	753b      	strb	r3, [r7, #20]

		canDrv->SetTxMsg(canMsg);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f107 0208 	add.w	r2, r7, #8
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fcb5 	bl	8001114 <_ZN6CanDrv8SetTxMsgER6CanMsg>
	}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_ZN3NmtC1EP6CanDrvt>:
{
	CanDrv * canDrv;
	uint16_t node;

public:
	Nmt(CanDrv * canDrv, uint16_t id) : canDrv(canDrv), node(id) {}
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	4613      	mov	r3, r2
 80017be:	80fb      	strh	r3, [r7, #6]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	88fa      	ldrh	r2, [r7, #6]
 80017ca:	809a      	strh	r2, [r3, #4]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_ZN3Nmt15GoToOperationalEv>:

	void GoToOperational()
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	{
		CanMsg canMsg;

		canMsg.index = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
		canMsg.data[0] = 0x0001 | node<<8;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	889b      	ldrh	r3, [r3, #4]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
		canMsg.data[1] = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
		canMsg.dataNumber = 2;
 80017f6:	2302      	movs	r3, #2
 80017f8:	753b      	strb	r3, [r7, #20]

		canDrv->SetTxMsg(canMsg);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f107 0208 	add.w	r2, r7, #8
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fc85 	bl	8001114 <_ZN6CanDrv8SetTxMsgER6CanMsg>
	}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_ZN13MiControlCmds10ClearErrorEv>:
{

enum NumberOfBits {DataSize4 = 4, DataSize8 = 8, DataSize16 = 16, DataSize32 = 32};

inline SdoCmd ClearError()
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	SdoCmd cmd;
	cmd.type = 0x23;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2223      	movs	r2, #35	; 0x23
 800181e:	701a      	strb	r2, [r3, #0]
	//cmd.index = __builtin_bswap16(0x3000);
	cmd.index = 0x3000;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	705a      	strb	r2, [r3, #1]
 8001826:	2200      	movs	r2, #0
 8001828:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800182c:	709a      	strb	r2, [r3, #2]
	cmd.subindex = 0x00;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	70da      	strb	r2, [r3, #3]
	cmd.data[0] = cmd.data[1] = cmd.data[2] = cmd.data[3] = 0;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	71da      	strb	r2, [r3, #7]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	79da      	ldrb	r2, [r3, #7]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	719a      	strb	r2, [r3, #6]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	799a      	ldrb	r2, [r3, #6]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	715a      	strb	r2, [r3, #5]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	795a      	ldrb	r2, [r3, #5]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	711a      	strb	r2, [r3, #4]
	cmd.data[0] = 0x01;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	711a      	strb	r2, [r3, #4]
	cmd.timeout = 30;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f042 021e 	orr.w	r2, r2, #30
 8001860:	721a      	strb	r2, [r3, #8]
 8001862:	2200      	movs	r2, #0
 8001864:	725a      	strb	r2, [r3, #9]
	cmd.trials = -1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	729a      	strb	r2, [r3, #10]
 800186e:	f04f 32ff 	mov.w	r2, #4294967295
 8001872:	72da      	strb	r2, [r3, #11]
	return cmd;
 8001874:	bf00      	nop
}
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_ZN13MiControlCmds12RestoreParamEv>:
	cmd.trials = -1;
	return cmd;
}

inline SdoCmd RestoreParam()
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	SdoCmd cmd;
	cmd.type = 0x23;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2223      	movs	r2, #35	; 0x23
 800188e:	701a      	strb	r2, [r3, #0]
	cmd.index = 0x3000;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	705a      	strb	r2, [r3, #1]
 8001896:	2200      	movs	r2, #0
 8001898:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800189c:	709a      	strb	r2, [r3, #2]
	cmd.subindex = 0x00;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	70da      	strb	r2, [r3, #3]
	cmd.data[0] = cmd.data[1] = cmd.data[2] = cmd.data[3] = 0;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	71da      	strb	r2, [r3, #7]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	79da      	ldrb	r2, [r3, #7]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	719a      	strb	r2, [r3, #6]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	799a      	ldrb	r2, [r3, #6]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	715a      	strb	r2, [r3, #5]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	795a      	ldrb	r2, [r3, #5]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	711a      	strb	r2, [r3, #4]
	cmd.data[0] = 0x81;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2281      	movs	r2, #129	; 0x81
 80018c6:	711a      	strb	r2, [r3, #4]
	cmd.timeout = 30;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f042 021e 	orr.w	r2, r2, #30
 80018d0:	721a      	strb	r2, [r3, #8]
 80018d2:	2200      	movs	r2, #0
 80018d4:	725a      	strb	r2, [r3, #9]
	cmd.trials = -1;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	729a      	strb	r2, [r3, #10]
 80018de:	f04f 32ff 	mov.w	r2, #4294967295
 80018e2:	72da      	strb	r2, [r3, #11]
	return cmd;
 80018e4:	bf00      	nop
}
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_ZN13MiControlCmds11MotorEnableEv>:
	cmd.trials = -1;
	return cmd;
}

inline SdoCmd MotorEnable()
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
	SdoCmd cmd;
	cmd.type = 0x23;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2223      	movs	r2, #35	; 0x23
 80018fe:	701a      	strb	r2, [r3, #0]
	cmd.index = 0x3004;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f042 0204 	orr.w	r2, r2, #4
 8001908:	705a      	strb	r2, [r3, #1]
 800190a:	2200      	movs	r2, #0
 800190c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001910:	709a      	strb	r2, [r3, #2]
	cmd.subindex = 0x00;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	70da      	strb	r2, [r3, #3]
	cmd.data[0] = cmd.data[1] = cmd.data[2] = cmd.data[3] = 0;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	71da      	strb	r2, [r3, #7]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	79da      	ldrb	r2, [r3, #7]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	719a      	strb	r2, [r3, #6]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	799a      	ldrb	r2, [r3, #6]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	715a      	strb	r2, [r3, #5]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	795a      	ldrb	r2, [r3, #5]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	711a      	strb	r2, [r3, #4]
	cmd.data[0] = 0x01;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	711a      	strb	r2, [r3, #4]
	cmd.timeout = 10;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f042 020a 	orr.w	r2, r2, #10
 8001944:	721a      	strb	r2, [r3, #8]
 8001946:	2200      	movs	r2, #0
 8001948:	725a      	strb	r2, [r3, #9]
	cmd.trials = -1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	729a      	strb	r2, [r3, #10]
 8001952:	f04f 32ff 	mov.w	r2, #4294967295
 8001956:	72da      	strb	r2, [r3, #11]
	return cmd;
 8001958:	bf00      	nop
}
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_ZN8MotorDrvC1EP6CanDrvh>:
	int32_t measuredPos;
	int32_t measuredCurrent;
	int32_t actualStatus;


	MotorDrv(CanDrv * canDrv, uint8_t id) : sdo(canDrv, id), pdo(canDrv, id), nmt(canDrv, id)
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	4613      	mov	r3, r2
 8001972:	71fb      	strb	r3, [r7, #7]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	b292      	uxth	r2, r2
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fd27 	bl	80013d0 <_ZN3SdoC1EP6CanDrvt>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001988:	79fa      	ldrb	r2, [r7, #7]
 800198a:	b292      	uxth	r2, r2
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fe88 	bl	80016a4 <_ZN3PdoC1EP6CanDrvt>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	b292      	uxth	r2, r2
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff06 	bl	80017b2 <_ZN3NmtC1EP6CanDrvt>
	{
		this->id = id;
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
		state = Idle;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		desiredVel = 0;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		SetPdoCmds();
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f805 	bl	80019d2 <_ZN8MotorDrv10SetPdoCmdsEv>

	}
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_ZN8MotorDrv10SetPdoCmdsEv>:

	void SetPdoCmds()
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
	{
		pdo.cmdTx[Pdo::Pdo1].size = 4;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2204      	movs	r2, #4
 80019de:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
	}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_ZN8MotorDrv9ConfigureEv>:

	void Configure()
 80019ee:	b590      	push	{r4, r7, lr}
 80019f0:	b08d      	sub	sp, #52	; 0x34
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
	{
		sdo.PushCommand(MiControlCmds::ClearError());
 80019f6:	687c      	ldr	r4, [r7, #4]
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff08 	bl	8001812 <_ZN13MiControlCmds10ClearErrorEv>
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4619      	mov	r1, r3
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff fd29 	bl	8001460 <_ZN3Sdo11PushCommandERK6SdoCmd>
		sdo.PushCommand(MiControlCmds::RestoreParam());
 8001a0e:	687c      	ldr	r4, [r7, #4]
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff34 	bl	8001882 <_ZN13MiControlCmds12RestoreParamEv>
 8001a1a:	f107 0318 	add.w	r3, r7, #24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fd1d 	bl	8001460 <_ZN3Sdo11PushCommandERK6SdoCmd>
		sdo.PushCommand(MiControlCmds::MotorEnable());
 8001a26:	687c      	ldr	r4, [r7, #4]
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff60 	bl	80018f2 <_ZN13MiControlCmds11MotorEnableEv>
 8001a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a36:	4619      	mov	r1, r3
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7ff fd11 	bl	8001460 <_ZN3Sdo11PushCommandERK6SdoCmd>
		//sdo.PushCommand(MiControlCmds::DisableTPDO(2));
		//sdo.PushCommand(MiControlCmds::SetTransmissionType(2));
		//sdo.PushCommand(MiControlCmds::MapTPDO(2, 0x3262, 0, MiControlCmds::DataSize32)); // Pr�d silnika.
		//sdo.PushCommand(MiControlCmds::EnableTPDO(3, 1));

		sdo.StartSequence();
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fd84 	bl	800154e <_ZN3Sdo13StartSequenceEv>
	}
 8001a46:	bf00      	nop
 8001a48:	3734      	adds	r7, #52	; 0x34
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}

08001a4e <_ZN8MotorDrv10SetCurrentEv>:
	{
		pdo.cmdTx[Pdo::Pdo1].data0 = (int32_t) desiredVel;
		pdo.Send(Pdo::Pdo1);
	}

	void SetCurrent()
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
	{
		pdo.cmdTx[Pdo::Pdo1].data0 = (int32_t) desiredCurrent;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 8001a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a60:	ee17 2a90 	vmov	r2, s15
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f8c3 21b2 	str.w	r2, [r3, #434]	; 0x1b2
		pdo.Send(Pdo::Pdo1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fe5c 	bl	8001730 <_ZN3Pdo4SendENS_6PdoObjE>
	}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_ZN8MotorDrv12ReadPositionEPV6CanMsg>:

	float ReadPosition(volatile CanMsg * msg)
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	{
		auto data = (ReceiveData1 *) msg;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
		measuredPos = data->pos;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		measuredVel = data->vel;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	}
 8001aa2:	bf00      	nop
 8001aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_ZN8MotorDrv11ReadCurrentEPV6CanMsg>:

	float ReadCurrent(volatile CanMsg * msg)
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
	{
		auto data = (ReceiveData2 *) msg;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	60fb      	str	r3, [r7, #12]
		measuredCurrent = data->current;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	}
 8001ad0:	bf00      	nop
 8001ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_ZN3Led12HardwareInitEv>:
//#define LED_R bitband_t m_BITBAND_PERIPH(&GPIOD->ODR, 14)
//#define LED_B bitband_t m_BITBAND_PERIPH(&GPIOD->ODR, 15)

class Led
{
	static void HardwareInit()
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
	{
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_ZN3Led12HardwareInitEv+0x28>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <_ZN3Led12HardwareInitEv+0x28>)
 8001aea:	f043 0308 	orr.w	r3, r3, #8
 8001aee:	6313      	str	r3, [r2, #48]	; 0x30

		// PD12, PD13, PD14, PD15 - LEDy
		GPIOD->MODER |= GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0 | GPIO_MODER_MODER14_0 |GPIO_MODER_MODER15_0;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <_ZN3Led12HardwareInitEv+0x2c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <_ZN3Led12HardwareInitEv+0x2c>)
 8001af6:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8001afa:	6013      	str	r3, [r2, #0]
	}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020c00 	.word	0x40020c00

08001b10 <_ZN3Led4InitEv>:

public:

	static void Init()
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	{
		HardwareInit();
 8001b14:	f7ff ffe4 	bl	8001ae0 <_ZN3Led12HardwareInitEv>
	}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZN3Led6YellowEv>:
	static volatile unsigned long & Green()
	{
		return bitband_t m_BITBAND_PERIPH(&GPIOD->ODR, 12);
	}

	static volatile unsigned long & Yellow()
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	{
		return bitband_t m_BITBAND_PERIPH(&GPIOD->ODR, 13);
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <_ZN3Led6YellowEv+0x10>)
	}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	424182b4 	.word	0x424182b4

08001b30 <_Z16motorCanSendDataPP8MotorDrvh>:

#include "can\can_drv.hpp"
#include "motor\mi_control.hpp"

inline bool motorCanSendData(MotorDrv * motor[], uint8_t motorNumbers)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
   bool operational = false;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	75fb      	strb	r3, [r7, #23]
   for(auto m = 0; m < motorNumbers; m++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f280 8086 	bge.w	8001c5a <_Z16motorCanSendDataPP8MotorDrvh+0x12a>
   {
      switch (motor[m]->state)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d878      	bhi.n	8001c52 <_Z16motorCanSendDataPP8MotorDrvh+0x122>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <_Z16motorCanSendDataPP8MotorDrvh+0x38>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001baf 	.word	0x08001baf
 8001b70:	08001c37 	.word	0x08001c37
 8001b74:	08001bd5 	.word	0x08001bd5
	  {
	     case MotorDrv::Idle:
	        motor[m]->sdo.StackWriteUpdate();
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fcfa 	bl	800157c <_ZN3Sdo16StackWriteUpdateEv>
	    	if (motor[m]->sdo.completed)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d057      	beq.n	8001c4c <_Z16motorCanSendDataPP8MotorDrvh+0x11c>
	    	    motor[m]->state = MotorDrv::Configured;
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
	     break;
 8001bac:	e04e      	b.n	8001c4c <_Z16motorCanSendDataPP8MotorDrvh+0x11c>

	     case MotorDrv::Configured:
	        motor[m]->nmt.GoToOperational();
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fe0c 	bl	80017da <_ZN3Nmt15GoToOperationalEv>
	    	motor[m]->state = MotorDrv::Waiting;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
	     break;
 8001bd2:	e03e      	b.n	8001c52 <_Z16motorCanSendDataPP8MotorDrvh+0x122>

	     case MotorDrv::Waiting:
	     {
	        bool ready = true;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
	    	for(auto i = 0; i < motorNumbers; i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	da1c      	bge.n	8001c1e <_Z16motorCanSendDataPP8MotorDrvh+0xee>
	    	   ready = ready && ((motor[i]->state == MotorDrv::Waiting)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d013      	beq.n	8001c12 <_Z16motorCanSendDataPP8MotorDrvh+0xe2>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d008      	beq.n	8001c0e <_Z16motorCanSendDataPP8MotorDrvh+0xde>
	    							|| (motor[i]->state == MotorDrv::Operational));
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d101      	bne.n	8001c12 <_Z16motorCanSendDataPP8MotorDrvh+0xe2>
	    	   ready = ready && ((motor[i]->state == MotorDrv::Waiting)
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <_Z16motorCanSendDataPP8MotorDrvh+0xe4>
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
	    	for(auto i = 0; i < motorNumbers; i++)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	e7de      	b.n	8001bdc <_Z16motorCanSendDataPP8MotorDrvh+0xac>
			   if(ready)
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d015      	beq.n	8001c50 <_Z16motorCanSendDataPP8MotorDrvh+0x120>
			      motor[m]->state = MotorDrv::Operational;
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
	     }
	     break;
 8001c34:	e00c      	b.n	8001c50 <_Z16motorCanSendDataPP8MotorDrvh+0x120>

	     case MotorDrv::Operational:
	        motor[m]->SetCurrent();
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff04 	bl	8001a4e <_ZN8MotorDrv10SetCurrentEv>
	        operational = true;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
		 break;
 8001c4a:	e002      	b.n	8001c52 <_Z16motorCanSendDataPP8MotorDrvh+0x122>
	     break;
 8001c4c:	bf00      	nop
 8001c4e:	e000      	b.n	8001c52 <_Z16motorCanSendDataPP8MotorDrvh+0x122>
	     break;
 8001c50:	bf00      	nop
   for(auto m = 0; m < motorNumbers; m++)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	3301      	adds	r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	e774      	b.n	8001b44 <_Z16motorCanSendDataPP8MotorDrvh+0x14>
	  }
   }
   return operational;
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_Z13motorReadDataP8MotorDrvPV6CanMsgt>:


inline void motorReadData(MotorDrv * mot, volatile CanMsg * msg, uint16_t cob)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	80fb      	strh	r3, [r7, #6]
   switch(cob)
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001c78:	d01f      	beq.n	8001cba <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x56>
 8001c7a:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001c7e:	dc06      	bgt.n	8001c8e <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x2a>
 8001c80:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001c84:	d00f      	beq.n	8001ca6 <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x42>
 8001c86:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001c8a:	d011      	beq.n	8001cb0 <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x4c>

	  case CanOpenObjects::pdo4Rx:
	  break;

	  default:
	  break;
 8001c8c:	e018      	b.n	8001cc0 <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x5c>
   switch(cob)
 8001c8e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001c92:	d014      	beq.n	8001cbe <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x5a>
 8001c94:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8001c98:	d000      	beq.n	8001c9c <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x38>
	  break;
 8001c9a:	e011      	b.n	8001cc0 <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x5c>
		 mot->sdo.received = true;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
	  break;
 8001ca4:	e00c      	b.n	8001cc0 <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x5c>
	     mot->ReadPosition(msg);
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff fee9 	bl	8001a80 <_ZN8MotorDrv12ReadPositionEPV6CanMsg>
	  break;
 8001cae:	e007      	b.n	8001cc0 <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x5c>
		 mot->ReadCurrent(msg);
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff fefd 	bl	8001ab2 <_ZN8MotorDrv11ReadCurrentEPV6CanMsg>
      break;
 8001cb8:	e002      	b.n	8001cc0 <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x5c>
	  break;
 8001cba:	bf00      	nop
 8001cbc:	e000      	b.n	8001cc0 <_Z13motorReadDataP8MotorDrvPV6CanMsgt+0x5c>
	  break;
 8001cbe:	bf00      	nop
   }
}
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <main>:
  */

//const float tauMax = 400;
const float tauMax = 3000;
int main(void)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	ed2d 8b02 	vpush	{d8}
 8001cce:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8001cd2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd4:	f000 fae2 	bl	800229c <HAL_Init>

  /* USER CODE BEGIN Init */
  tick = false;
 8001cd8:	4b89      	ldr	r3, [pc, #548]	; (8001f00 <main+0x238>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]

  appClk = 0;
 8001cde:	4b89      	ldr	r3, [pc, #548]	; (8001f04 <main+0x23c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

  Led::Init();
 8001ce4:	f7ff ff14 	bl	8001b10 <_ZN3Led4InitEv>
  canDrv.Init(CanDrv::B1M);
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4887      	ldr	r0, [pc, #540]	; (8001f08 <main+0x240>)
 8001cec:	f7ff f82a 	bl	8000d44 <_ZN6CanDrv4InitENS_8BaudRateE>

  MotorDrv motorDrv1(&canDrv, 2);
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4984      	ldr	r1, [pc, #528]	; (8001f08 <main+0x240>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fe35 	bl	8001966 <_ZN8MotorDrvC1EP6CanDrvh>
  //MotorDrv motorDrv2(&canDrv, 2);

  motor[0] = &motorDrv1;
 8001cfc:	4a83      	ldr	r2, [pc, #524]	; (8001f0c <main+0x244>)
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	6013      	str	r3, [r2, #0]
  //motor[1] = &motorDrv2;

  for (auto i = 0; i < motorNumbers; i++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8001d08:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	dc0d      	bgt.n	8001d2c <main+0x64>
	  motor[i]->Configure();
 8001d10:	4a7e      	ldr	r2, [pc, #504]	; (8001f0c <main+0x244>)
 8001d12:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fe67 	bl	80019ee <_ZN8MotorDrv9ConfigureEv>
  for (auto i = 0; i < motorNumbers; i++)
 8001d20:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001d24:	3301      	adds	r3, #1
 8001d26:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8001d2a:	e7ed      	b.n	8001d08 <main+0x40>

  canDrv.SendStart();
 8001d2c:	4876      	ldr	r0, [pc, #472]	; (8001f08 <main+0x240>)
 8001d2e:	f7ff fa43 	bl	80011b8 <_ZN6CanDrv9SendStartEv>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001d32:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d34:	f000 f900 	bl	8001f38 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d38:	f000 f972 	bl	8002020 <_ZL12MX_GPIO_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool controlActive = false;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
  float oldPos = 0;
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

  while (1)
  {
     if (tick)
 8001d4a:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <main+0x238>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0fa      	beq.n	8001d4a <main+0x82>
	 {
	    float time = (float) appClk * 0.001;
 8001d54:	4b6b      	ldr	r3, [pc, #428]	; (8001f04 <main+0x23c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d60:	ee17 0a90 	vmov	r0, s15
 8001d64:	f7fe fb94 	bl	8000490 <__aeabi_f2d>
 8001d68:	a361      	add	r3, pc, #388	; (adr r3, 8001ef0 <main+0x228>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fbe7 	bl	8000540 <__aeabi_dmul>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	4618      	mov	r0, r3
 8001d78:	4621      	mov	r1, r4
 8001d7a:	f7fe fdf3 	bl	8000964 <__aeabi_d2f>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	    tick = false;
 8001d84:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <main+0x238>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]

	    if (controlActive)
 8001d8a:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 809b 	beq.w	8001eca <main+0x202>
	    {
	    	//compute the algorithm
	    	auto vel = motor[0]->measuredVel-oldPos;
 8001d94:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <main+0x244>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da4:	edd7 7a8f 	vldr	s15, [r7, #572]	; 0x23c
 8001da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dac:	edc7 7a8c 	vstr	s15, [r7, #560]	; 0x230
	    	auto tau = -1*(motor[0]->measuredVel - 10000*sinf(time*2.5*2*M_PI)) -10*vel; //4 Hz
 8001db0:	4b56      	ldr	r3, [pc, #344]	; (8001f0c <main+0x244>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001dc0:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8001dc4:	f7fe fb64 	bl	8000490 <__aeabi_f2d>
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <main+0x248>)
 8001dce:	f7fe fbb7 	bl	8000540 <__aeabi_dmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460c      	mov	r4, r1
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4621      	mov	r1, r4
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	f7fe f9f9 	bl	80001d4 <__adddf3>
 8001de2:	4603      	mov	r3, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	4618      	mov	r0, r3
 8001de8:	4621      	mov	r1, r4
 8001dea:	a343      	add	r3, pc, #268	; (adr r3, 8001ef8 <main+0x230>)
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fba6 	bl	8000540 <__aeabi_dmul>
 8001df4:	4603      	mov	r3, r0
 8001df6:	460c      	mov	r4, r1
 8001df8:	4618      	mov	r0, r3
 8001dfa:	4621      	mov	r1, r4
 8001dfc:	f7fe fdb2 	bl	8000964 <__aeabi_d2f>
 8001e00:	4603      	mov	r3, r0
 8001e02:	ee00 3a10 	vmov	s0, r3
 8001e06:	f000 ffbb 	bl	8002d80 <sinf>
 8001e0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e0e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001f14 <main+0x24c>
 8001e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e16:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001e1a:	eeb1 7a67 	vneg.f32	s14, s15
 8001e1e:	edd7 7a8c 	vldr	s15, [r7, #560]	; 0x230
 8001e22:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001e26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e2e:	edc7 7a8e 	vstr	s15, [r7, #568]	; 0x238

	    	if (tau<-tauMax)
 8001e32:	edd7 7a8e 	vldr	s15, [r7, #568]	; 0x238
 8001e36:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001f18 <main+0x250>
 8001e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	d502      	bpl.n	8001e4a <main+0x182>
	    		tau = -tauMax;
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <main+0x254>)
 8001e46:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	    	if (tau>tauMax)
 8001e4a:	edd7 7a8e 	vldr	s15, [r7, #568]	; 0x238
 8001e4e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001f20 <main+0x258>
 8001e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	dd02      	ble.n	8001e62 <main+0x19a>
	    		tau = tauMax;
 8001e5c:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <main+0x25c>)
 8001e5e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

	    	oldPos = motor[0]->measuredVel;
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <main+0x244>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e72:	edc7 7a8f 	vstr	s15, [r7, #572]	; 0x23c
	    	motor[0]->desiredCurrent= tau; //1250*sinf(time);
 8001e76:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <main+0x244>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8001e7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	    	//store data
	   	    bufData_1[indexTable_1++] = motor[0]->measuredPos;
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <main+0x244>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <main+0x260>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	4826      	ldr	r0, [pc, #152]	; (8001f28 <main+0x260>)
 8001e8e:	6001      	str	r1, [r0, #0]
 8001e90:	f8d2 2220 	ldr.w	r2, [r2, #544]	; 0x220
 8001e94:	4925      	ldr	r1, [pc, #148]	; (8001f2c <main+0x264>)
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	   	    bufData_2[indexTable_2++] = motor[0]->measuredVel;
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <main+0x244>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <main+0x268>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	1c59      	adds	r1, r3, #1
 8001ea4:	4822      	ldr	r0, [pc, #136]	; (8001f30 <main+0x268>)
 8001ea6:	6001      	str	r1, [r0, #0]
 8001ea8:	f8d2 221c 	ldr.w	r2, [r2, #540]	; 0x21c
 8001eac:	4921      	ldr	r1, [pc, #132]	; (8001f34 <main+0x26c>)
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	   	    indexTable_1 &= 8192-1;
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <main+0x260>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001eba:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <main+0x260>)
 8001ebc:	6013      	str	r3, [r2, #0]
	   	 	indexTable_2 &= 8192-1;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <main+0x268>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ec6:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <main+0x268>)
 8001ec8:	6013      	str	r3, [r2, #0]
	    }

	    if (motorCanSendData(motor, motorNumbers))
 8001eca:	2101      	movs	r1, #1
 8001ecc:	480f      	ldr	r0, [pc, #60]	; (8001f0c <main+0x244>)
 8001ece:	f7ff fe2f 	bl	8001b30 <_Z16motorCanSendDataPP8MotorDrvh>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <main+0x21c>
	    {
	    	SetSynchObj(&canDrv);
 8001ed8:	480b      	ldr	r0, [pc, #44]	; (8001f08 <main+0x240>)
 8001eda:	f7ff fa44 	bl	8001366 <_Z11SetSynchObjP6CanDrv>
	    	controlActive = true;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
	    }
	    canDrv.SendStart();
 8001ee4:	4808      	ldr	r0, [pc, #32]	; (8001f08 <main+0x240>)
 8001ee6:	f7ff f967 	bl	80011b8 <_ZN6CanDrv9SendStartEv>
	 }

    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
  }
 8001eea:	e72e      	b.n	8001d4a <main+0x82>
 8001eec:	f3af 8000 	nop.w
 8001ef0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ef4:	3f50624d 	.word	0x3f50624d
 8001ef8:	54442d18 	.word	0x54442d18
 8001efc:	400921fb 	.word	0x400921fb
 8001f00:	20000028 	.word	0x20000028
 8001f04:	20000444 	.word	0x20000444
 8001f08:	2000002c 	.word	0x2000002c
 8001f0c:	20000440 	.word	0x20000440
 8001f10:	40040000 	.word	0x40040000
 8001f14:	461c4000 	.word	0x461c4000
 8001f18:	c53b8000 	.word	0xc53b8000
 8001f1c:	c53b8000 	.word	0xc53b8000
 8001f20:	453b8000 	.word	0x453b8000
 8001f24:	453b8000 	.word	0x453b8000
 8001f28:	2000044c 	.word	0x2000044c
 8001f2c:	20000454 	.word	0x20000454
 8001f30:	20000450 	.word	0x20000450
 8001f34:	20008454 	.word	0x20008454

08001f38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b094      	sub	sp, #80	; 0x50
 8001f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3e:	f107 0320 	add.w	r3, r7, #32
 8001f42:	2230      	movs	r2, #48	; 0x30
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 fc95 	bl	8003876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <_Z18SystemClock_Configv+0xe0>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	4a2c      	ldr	r2, [pc, #176]	; (8002018 <_Z18SystemClock_Configv+0xe0>)
 8001f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <_Z18SystemClock_Configv+0xe0>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <_Z18SystemClock_Configv+0xe4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a26      	ldr	r2, [pc, #152]	; (800201c <_Z18SystemClock_Configv+0xe4>)
 8001f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b24      	ldr	r3, [pc, #144]	; (800201c <_Z18SystemClock_Configv+0xe4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f94:	2301      	movs	r3, #1
 8001f96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001fac:	23a8      	movs	r3, #168	; 0xa8
 8001fae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb8:	f107 0320 	add.w	r3, r7, #32
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fab1 	bl	8002524 <HAL_RCC_OscConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001fd2:	f000 f8b9 	bl	8002148 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fe2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	2105      	movs	r1, #5
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fd05 	bl	8002a04 <HAL_RCC_ClockConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800200a:	f000 f89d 	bl	8002148 <Error_Handler>
  }
}
 800200e:	bf00      	nop
 8002010:	3750      	adds	r7, #80	; 0x50
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40007000 	.word	0x40007000

08002020 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <_ZL12MX_GPIO_Initv+0x30>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <_ZL12MX_GPIO_Initv+0x30>)
 8002030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <_ZL12MX_GPIO_Initv+0x30>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]

}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <SysTick_Handler>:
	GPIOA->MODER |=  GPIO_MODER_MODER1_0 | GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1 |GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1 | GPIO_MODER_MODER9_1 | GPIO_MODER_MODER13_1 | GPIO_MODER_MODER15_1;
	GPIOA->IDR |= GPIO_IDR_IDR_6;
}

void SysTick_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	appClk++;
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <SysTick_Handler+0x44>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <SysTick_Handler+0x44>)
 8002060:	6013      	str	r3, [r2, #0]

	if (++counter1==5)
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <SysTick_Handler+0x48>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	4a0c      	ldr	r2, [pc, #48]	; (800209c <SysTick_Handler+0x48>)
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	2b05      	cmp	r3, #5
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <SysTick_Handler+0x40>
	{
		tick = true;
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <SysTick_Handler+0x4c>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
		counter1 = 0;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <SysTick_Handler+0x48>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
		Led::Yellow() ^= 1;
 8002086:	f7ff fd49 	bl	8001b1c <_ZN3Led6YellowEv>
 800208a:	4603      	mov	r3, r0
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	f082 0201 	eor.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
	}
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000444 	.word	0x20000444
 800209c:	20000448 	.word	0x20000448
 80020a0:	20000028 	.word	0x20000028

080020a4 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	canDrv.IrqWrite();
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <CAN1_TX_IRQHandler+0x10>)
 80020aa:	f7ff f90b 	bl	80012c4 <_ZN6CanDrv8IrqWriteEv>
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2000002c 	.word	0x2000002c

080020b8 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
	canDrv.IrqRead();
 80020be:	4820      	ldr	r0, [pc, #128]	; (8002140 <CAN1_RX0_IRQHandler+0x88>)
 80020c0:	f7ff f946 	bl	8001350 <_ZN6CanDrv7IrqReadEv>

	while (canDrv.GetRxMsg())
 80020c4:	481e      	ldr	r0, [pc, #120]	; (8002140 <CAN1_RX0_IRQHandler+0x88>)
 80020c6:	f7fe ffeb 	bl	80010a0 <_ZN6CanDrv8GetRxMsgEv>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d033      	beq.n	8002138 <CAN1_RX0_IRQHandler+0x80>
	{
	   auto msg = canDrv.rxMsg;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <CAN1_RX0_IRQHandler+0x88>)
 80020d2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020d6:	60fb      	str	r3, [r7, #12]
	   auto id = msg->index & CanOpenObjects::DeviceMask;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e0:	60bb      	str	r3, [r7, #8]
	   auto cob = msg->index & CanOpenObjects::ObjectMask;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 80020ea:	607b      	str	r3, [r7, #4]

	   MotorDrv * mot = NULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
	   for(auto m = 0; m < motorNumbers; m++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	dc12      	bgt.n	8002120 <CAN1_RX0_IRQHandler+0x68>
	      if (motor[m]->id == id)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <CAN1_RX0_IRQHandler+0x8c>)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002102:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8002106:	461a      	mov	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4293      	cmp	r3, r2
 800210c:	d104      	bne.n	8002118 <CAN1_RX0_IRQHandler+0x60>
		     mot = motor[m];
 800210e:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <CAN1_RX0_IRQHandler+0x8c>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	617b      	str	r3, [r7, #20]
	   for(auto m = 0; m < motorNumbers; m++)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	3301      	adds	r3, #1
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	e7e9      	b.n	80020f4 <CAN1_RX0_IRQHandler+0x3c>

	   // avoid if it does not fits
	   if (!mot)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <CAN1_RX0_IRQHandler+0x7e>
          return;

	   motorReadData(mot, msg, cob);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	b29b      	uxth	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	68f9      	ldr	r1, [r7, #12]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff fd98 	bl	8001c64 <_Z13motorReadDataP8MotorDrvPV6CanMsgt>
	while (canDrv.GetRxMsg())
 8002134:	e7c6      	b.n	80020c4 <CAN1_RX0_IRQHandler+0xc>
          return;
 8002136:	bf00      	nop
	}
}
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000002c 	.word	0x2000002c
 8002144:	20000440 	.word	0x20000440

08002148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <_Z41__static_initialization_and_destruction_0ii>:
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_GLOBAL__sub_I_tick>:
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
 8002170:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002174:	2001      	movs	r0, #1
 8002176:	f7ff ffee 	bl	8002156 <_Z41__static_initialization_and_destruction_0ii>
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_MspInit+0x4c>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <HAL_MspInit+0x4c>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_MspInit+0x4c>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_MspInit+0x4c>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <HAL_MspInit+0x4c>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_MspInit+0x4c>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800

080021cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <HardFault_Handler+0x4>

080021e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <MemManage_Handler+0x4>

080021e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <BusFault_Handler+0x4>

080021ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <UsageFault_Handler+0x4>

080021f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <SystemInit+0x28>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	4a07      	ldr	r2, [pc, #28]	; (8002244 <SystemInit+0x28>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SystemInit+0x28>)
 8002232:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002236:	609a      	str	r2, [r3, #8]
#endif
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002280 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800224c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800224e:	e003      	b.n	8002258 <LoopCopyDataInit>

08002250 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002252:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002254:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002256:	3104      	adds	r1, #4

08002258 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002258:	480b      	ldr	r0, [pc, #44]	; (8002288 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800225c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800225e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002260:	d3f6      	bcc.n	8002250 <CopyDataInit>
  ldr  r2, =_sbss
 8002262:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002264:	e002      	b.n	800226c <LoopFillZerobss>

08002266 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002266:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002268:	f842 3b04 	str.w	r3, [r2], #4

0800226c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800226e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002270:	d3f9      	bcc.n	8002266 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002272:	f7ff ffd3 	bl	800221c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002276:	f001 facf 	bl	8003818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227a:	f7ff fd25 	bl	8001cc8 <main>
  bx  lr    
 800227e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002280:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002284:	08003c94 	.word	0x08003c94
  ldr  r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800228c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002290:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002294:	20010458 	.word	0x20010458

08002298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC_IRQHandler>
	...

0800229c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <HAL_Init+0x40>)
 80022a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_Init+0x40>)
 80022b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_Init+0x40>)
 80022be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c4:	2003      	movs	r0, #3
 80022c6:	f000 f8f9 	bl	80024bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f000 f808 	bl	80022e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d0:	f7ff ff54 	bl	800217c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023c00 	.word	0x40023c00

080022e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_InitTick+0x54>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x58>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f903 	bl	800250a <HAL_SYSTICK_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00e      	b.n	800232c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d80a      	bhi.n	800232a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f000 f8d9 	bl	80024d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <HAL_InitTick+0x5c>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000000 	.word	0x20000000
 8002338:	20000008 	.word	0x20000008
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20010454 	.word	0x20010454

08002358 <__NVIC_SetPriorityGrouping>:
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_GetPriorityGrouping>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db0a      	blt.n	80023e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	490c      	ldr	r1, [pc, #48]	; (8002408 <__NVIC_SetPriority+0x4c>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	440b      	add	r3, r1
 80023e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e4:	e00a      	b.n	80023fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <__NVIC_SetPriority+0x50>)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3b04      	subs	r3, #4
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	440b      	add	r3, r1
 80023fa:	761a      	strb	r2, [r3, #24]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf28      	it	cs
 800242e:	2304      	movcs	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3304      	adds	r3, #4
 8002436:	2b06      	cmp	r3, #6
 8002438:	d902      	bls.n	8002440 <NVIC_EncodePriority+0x30>
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b03      	subs	r3, #3
 800243e:	e000      	b.n	8002442 <NVIC_EncodePriority+0x32>
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002458:	f04f 31ff 	mov.w	r1, #4294967295
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43d9      	mvns	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	4313      	orrs	r3, r2
         );
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002488:	d301      	bcc.n	800248e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248a:	2301      	movs	r3, #1
 800248c:	e00f      	b.n	80024ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <SysTick_Config+0x40>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002496:	210f      	movs	r1, #15
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f7ff ff8e 	bl	80023bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <SysTick_Config+0x40>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SysTick_Config+0x40>)
 80024a8:	2207      	movs	r2, #7
 80024aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e000e010 	.word	0xe000e010

080024bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff47 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e4:	f7ff ff5c 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 80024e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f7ff ff8e 	bl	8002410 <NVIC_EncodePriority>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff5d 	bl	80023bc <__NVIC_SetPriority>
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ffb0 	bl	8002478 <SysTick_Config>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e25b      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d075      	beq.n	800262e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002542:	4ba3      	ldr	r3, [pc, #652]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b04      	cmp	r3, #4
 800254c:	d00c      	beq.n	8002568 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254e:	4ba0      	ldr	r3, [pc, #640]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002556:	2b08      	cmp	r3, #8
 8002558:	d112      	bne.n	8002580 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255a:	4b9d      	ldr	r3, [pc, #628]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002566:	d10b      	bne.n	8002580 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	4b99      	ldr	r3, [pc, #612]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d05b      	beq.n	800262c <HAL_RCC_OscConfig+0x108>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d157      	bne.n	800262c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e236      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d106      	bne.n	8002598 <HAL_RCC_OscConfig+0x74>
 800258a:	4b91      	ldr	r3, [pc, #580]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a90      	ldr	r2, [pc, #576]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e01d      	b.n	80025d4 <HAL_RCC_OscConfig+0xb0>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x98>
 80025a2:	4b8b      	ldr	r3, [pc, #556]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a8a      	ldr	r2, [pc, #552]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a87      	ldr	r2, [pc, #540]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0xb0>
 80025bc:	4b84      	ldr	r3, [pc, #528]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a83      	ldr	r2, [pc, #524]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80025c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b81      	ldr	r3, [pc, #516]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a80      	ldr	r2, [pc, #512]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80025ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff feb0 	bl	8002340 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e4:	f7ff feac 	bl	8002340 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1fb      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0xc0>
 8002602:	e014      	b.n	800262e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff fe9c 	bl	8002340 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260c:	f7ff fe98 	bl	8002340 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e1e7      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261e:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0xe8>
 800262a:	e000      	b.n	800262e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d063      	beq.n	8002702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800263a:	4b65      	ldr	r3, [pc, #404]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002646:	4b62      	ldr	r3, [pc, #392]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800264e:	2b08      	cmp	r3, #8
 8002650:	d11c      	bne.n	800268c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002652:	4b5f      	ldr	r3, [pc, #380]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d116      	bne.n	800268c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265e:	4b5c      	ldr	r3, [pc, #368]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x152>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e1bb      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b56      	ldr	r3, [pc, #344]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4952      	ldr	r1, [pc, #328]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	e03a      	b.n	8002702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002694:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 8002696:	2201      	movs	r2, #1
 8002698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7ff fe51 	bl	8002340 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a2:	f7ff fe4d 	bl	8002340 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e19c      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b4:	4b46      	ldr	r3, [pc, #280]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c0:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4940      	ldr	r1, [pc, #256]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
 80026d4:	e015      	b.n	8002702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d6:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7ff fe30 	bl	8002340 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e4:	f7ff fe2c 	bl	8002340 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e17b      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d030      	beq.n	8002770 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d016      	beq.n	8002744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002716:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_RCC_OscConfig+0x2b4>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7ff fe10 	bl	8002340 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002724:	f7ff fe0c 	bl	8002340 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e15b      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x200>
 8002742:	e015      	b.n	8002770 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002744:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <HAL_RCC_OscConfig+0x2b4>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7ff fdf9 	bl	8002340 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002752:	f7ff fdf5 	bl	8002340 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e144      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a0 	beq.w	80028be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_OscConfig+0x2b8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d121      	bne.n	80027fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_RCC_OscConfig+0x2b8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a07      	ldr	r2, [pc, #28]	; (80027dc <HAL_RCC_OscConfig+0x2b8>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c6:	f7ff fdbb 	bl	8002340 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	e011      	b.n	80027f2 <HAL_RCC_OscConfig+0x2ce>
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	42470000 	.word	0x42470000
 80027d8:	42470e80 	.word	0x42470e80
 80027dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e0:	f7ff fdae 	bl	8002340 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e0fd      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d106      	bne.n	8002814 <HAL_RCC_OscConfig+0x2f0>
 8002806:	4b7d      	ldr	r3, [pc, #500]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	4a7c      	ldr	r2, [pc, #496]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
 8002812:	e01c      	b.n	800284e <HAL_RCC_OscConfig+0x32a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b05      	cmp	r3, #5
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x312>
 800281c:	4b77      	ldr	r3, [pc, #476]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a76      	ldr	r2, [pc, #472]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	4b74      	ldr	r3, [pc, #464]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	4a73      	ldr	r2, [pc, #460]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	; 0x70
 8002834:	e00b      	b.n	800284e <HAL_RCC_OscConfig+0x32a>
 8002836:	4b71      	ldr	r3, [pc, #452]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a70      	ldr	r2, [pc, #448]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
 8002842:	4b6e      	ldr	r3, [pc, #440]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	4a6d      	ldr	r2, [pc, #436]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d015      	beq.n	8002882 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7ff fd73 	bl	8002340 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7ff fd6f 	bl	8002340 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	; 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0bc      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	4b61      	ldr	r3, [pc, #388]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ee      	beq.n	800285e <HAL_RCC_OscConfig+0x33a>
 8002880:	e014      	b.n	80028ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7ff fd5d 	bl	8002340 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7ff fd59 	bl	8002340 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e0a6      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	4b56      	ldr	r3, [pc, #344]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ee      	bne.n	800288a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b52      	ldr	r3, [pc, #328]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8092 	beq.w	80029ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028c8:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d05c      	beq.n	800298e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d141      	bne.n	8002960 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028dc:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <HAL_RCC_OscConfig+0x4dc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7ff fd2d 	bl	8002340 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ea:	f7ff fd29 	bl	8002340 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e078      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fc:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	019b      	lsls	r3, r3, #6
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	3b01      	subs	r3, #1
 8002922:	041b      	lsls	r3, r3, #16
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	061b      	lsls	r3, r3, #24
 800292c:	4933      	ldr	r1, [pc, #204]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 800292e:	4313      	orrs	r3, r2
 8002930:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002932:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <HAL_RCC_OscConfig+0x4dc>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7ff fd02 	bl	8002340 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7ff fcfe 	bl	8002340 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e04d      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x41c>
 800295e:	e045      	b.n	80029ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x4dc>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7ff fceb 	bl	8002340 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296e:	f7ff fce7 	bl	8002340 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e036      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002980:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x44a>
 800298c:	e02e      	b.n	80029ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e029      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d11c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d115      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029c2:	4013      	ands	r3, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d10d      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40007000 	.word	0x40007000
 80029fc:	40023800 	.word	0x40023800
 8002a00:	42470060 	.word	0x42470060

08002a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0cc      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d90c      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0b8      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a58:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a58      	ldr	r2, [pc, #352]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a70:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	494d      	ldr	r1, [pc, #308]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d044      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d119      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e067      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae2:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 0203 	bic.w	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4934      	ldr	r1, [pc, #208]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af4:	f7ff fc24 	bl	8002340 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afc:	f7ff fc20 	bl	8002340 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e04f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 020c 	and.w	r2, r3, #12
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d1eb      	bne.n	8002afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b24:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d20c      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e032      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b8a:	f000 f821 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002b8e:	4601      	mov	r1, r0
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fb98 	bl	80022e0 <HAL_InitTick>

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023c00 	.word	0x40023c00
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	080038a0 	.word	0x080038a0
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	20000004 	.word	0x20000004

08002bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	2300      	movs	r3, #0
 8002be0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d007      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x32>
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d008      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x38>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 80b4 	bne.w	8002d64 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bfc:	4b5e      	ldr	r3, [pc, #376]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bfe:	60bb      	str	r3, [r7, #8]
       break;
 8002c00:	e0b3      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c02:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c04:	60bb      	str	r3, [r7, #8]
      break;
 8002c06:	e0b0      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c08:	4b5a      	ldr	r3, [pc, #360]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c12:	4b58      	ldr	r3, [pc, #352]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d04a      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1e:	4b55      	ldr	r3, [pc, #340]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	099b      	lsrs	r3, r3, #6
 8002c24:	f04f 0400 	mov.w	r4, #0
 8002c28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	ea03 0501 	and.w	r5, r3, r1
 8002c34:	ea04 0602 	and.w	r6, r4, r2
 8002c38:	4629      	mov	r1, r5
 8002c3a:	4632      	mov	r2, r6
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	f04f 0400 	mov.w	r4, #0
 8002c44:	0154      	lsls	r4, r2, #5
 8002c46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c4a:	014b      	lsls	r3, r1, #5
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4622      	mov	r2, r4
 8002c50:	1b49      	subs	r1, r1, r5
 8002c52:	eb62 0206 	sbc.w	r2, r2, r6
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	f04f 0400 	mov.w	r4, #0
 8002c5e:	0194      	lsls	r4, r2, #6
 8002c60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c64:	018b      	lsls	r3, r1, #6
 8002c66:	1a5b      	subs	r3, r3, r1
 8002c68:	eb64 0402 	sbc.w	r4, r4, r2
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	00e2      	lsls	r2, r4, #3
 8002c76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c7a:	00d9      	lsls	r1, r3, #3
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4614      	mov	r4, r2
 8002c80:	195b      	adds	r3, r3, r5
 8002c82:	eb44 0406 	adc.w	r4, r4, r6
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	0262      	lsls	r2, r4, #9
 8002c90:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c94:	0259      	lsls	r1, r3, #9
 8002c96:	460b      	mov	r3, r1
 8002c98:	4614      	mov	r4, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f04f 0400 	mov.w	r4, #0
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4623      	mov	r3, r4
 8002ca8:	f7fd feac 	bl	8000a04 <__aeabi_uldivmod>
 8002cac:	4603      	mov	r3, r0
 8002cae:	460c      	mov	r4, r1
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e049      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb4:	4b2f      	ldr	r3, [pc, #188]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	f04f 0400 	mov.w	r4, #0
 8002cbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	ea03 0501 	and.w	r5, r3, r1
 8002cca:	ea04 0602 	and.w	r6, r4, r2
 8002cce:	4629      	mov	r1, r5
 8002cd0:	4632      	mov	r2, r6
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	f04f 0400 	mov.w	r4, #0
 8002cda:	0154      	lsls	r4, r2, #5
 8002cdc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ce0:	014b      	lsls	r3, r1, #5
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4622      	mov	r2, r4
 8002ce6:	1b49      	subs	r1, r1, r5
 8002ce8:	eb62 0206 	sbc.w	r2, r2, r6
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	f04f 0400 	mov.w	r4, #0
 8002cf4:	0194      	lsls	r4, r2, #6
 8002cf6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cfa:	018b      	lsls	r3, r1, #6
 8002cfc:	1a5b      	subs	r3, r3, r1
 8002cfe:	eb64 0402 	sbc.w	r4, r4, r2
 8002d02:	f04f 0100 	mov.w	r1, #0
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	00e2      	lsls	r2, r4, #3
 8002d0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d10:	00d9      	lsls	r1, r3, #3
 8002d12:	460b      	mov	r3, r1
 8002d14:	4614      	mov	r4, r2
 8002d16:	195b      	adds	r3, r3, r5
 8002d18:	eb44 0406 	adc.w	r4, r4, r6
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	02a2      	lsls	r2, r4, #10
 8002d26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d2a:	0299      	lsls	r1, r3, #10
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4614      	mov	r4, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	4621      	mov	r1, r4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f04f 0400 	mov.w	r4, #0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	f7fd fe61 	bl	8000a04 <__aeabi_uldivmod>
 8002d42:	4603      	mov	r3, r0
 8002d44:	460c      	mov	r4, r1
 8002d46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	3301      	adds	r3, #1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	60bb      	str	r3, [r7, #8]
      break;
 8002d62:	e002      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d66:	60bb      	str	r3, [r7, #8]
      break;
 8002d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d74:	40023800 	.word	0x40023800
 8002d78:	00f42400 	.word	0x00f42400
 8002d7c:	007a1200 	.word	0x007a1200

08002d80 <sinf>:
 8002d80:	ee10 3a10 	vmov	r3, s0
 8002d84:	b507      	push	{r0, r1, r2, lr}
 8002d86:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <sinf+0x7c>)
 8002d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	dc05      	bgt.n	8002d9c <sinf+0x1c>
 8002d90:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8002e00 <sinf+0x80>
 8002d94:	2000      	movs	r0, #0
 8002d96:	f000 fc41 	bl	800361c <__kernel_sinf>
 8002d9a:	e004      	b.n	8002da6 <sinf+0x26>
 8002d9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002da0:	db04      	blt.n	8002dac <sinf+0x2c>
 8002da2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002da6:	b003      	add	sp, #12
 8002da8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dac:	4668      	mov	r0, sp
 8002dae:	f000 f829 	bl	8002e04 <__ieee754_rem_pio2f>
 8002db2:	f000 0003 	and.w	r0, r0, #3
 8002db6:	2801      	cmp	r0, #1
 8002db8:	d008      	beq.n	8002dcc <sinf+0x4c>
 8002dba:	2802      	cmp	r0, #2
 8002dbc:	d00d      	beq.n	8002dda <sinf+0x5a>
 8002dbe:	b9b0      	cbnz	r0, 8002dee <sinf+0x6e>
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	eddd 0a01 	vldr	s1, [sp, #4]
 8002dc6:	ed9d 0a00 	vldr	s0, [sp]
 8002dca:	e7e4      	b.n	8002d96 <sinf+0x16>
 8002dcc:	eddd 0a01 	vldr	s1, [sp, #4]
 8002dd0:	ed9d 0a00 	vldr	s0, [sp]
 8002dd4:	f000 f942 	bl	800305c <__kernel_cosf>
 8002dd8:	e7e5      	b.n	8002da6 <sinf+0x26>
 8002dda:	2001      	movs	r0, #1
 8002ddc:	eddd 0a01 	vldr	s1, [sp, #4]
 8002de0:	ed9d 0a00 	vldr	s0, [sp]
 8002de4:	f000 fc1a 	bl	800361c <__kernel_sinf>
 8002de8:	eeb1 0a40 	vneg.f32	s0, s0
 8002dec:	e7db      	b.n	8002da6 <sinf+0x26>
 8002dee:	eddd 0a01 	vldr	s1, [sp, #4]
 8002df2:	ed9d 0a00 	vldr	s0, [sp]
 8002df6:	f000 f931 	bl	800305c <__kernel_cosf>
 8002dfa:	e7f5      	b.n	8002de8 <sinf+0x68>
 8002dfc:	3f490fd8 	.word	0x3f490fd8
 8002e00:	00000000 	.word	0x00000000

08002e04 <__ieee754_rem_pio2f>:
 8002e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e06:	ee10 6a10 	vmov	r6, s0
 8002e0a:	4b86      	ldr	r3, [pc, #536]	; (8003024 <__ieee754_rem_pio2f+0x220>)
 8002e0c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8002e10:	429c      	cmp	r4, r3
 8002e12:	b087      	sub	sp, #28
 8002e14:	4605      	mov	r5, r0
 8002e16:	dc05      	bgt.n	8002e24 <__ieee754_rem_pio2f+0x20>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	ed85 0a00 	vstr	s0, [r5]
 8002e1e:	6043      	str	r3, [r0, #4]
 8002e20:	2000      	movs	r0, #0
 8002e22:	e020      	b.n	8002e66 <__ieee754_rem_pio2f+0x62>
 8002e24:	4b80      	ldr	r3, [pc, #512]	; (8003028 <__ieee754_rem_pio2f+0x224>)
 8002e26:	429c      	cmp	r4, r3
 8002e28:	dc38      	bgt.n	8002e9c <__ieee754_rem_pio2f+0x98>
 8002e2a:	2e00      	cmp	r6, #0
 8002e2c:	f024 040f 	bic.w	r4, r4, #15
 8002e30:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800302c <__ieee754_rem_pio2f+0x228>
 8002e34:	4b7e      	ldr	r3, [pc, #504]	; (8003030 <__ieee754_rem_pio2f+0x22c>)
 8002e36:	dd18      	ble.n	8002e6a <__ieee754_rem_pio2f+0x66>
 8002e38:	429c      	cmp	r4, r3
 8002e3a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8002e3e:	bf09      	itett	eq
 8002e40:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8003034 <__ieee754_rem_pio2f+0x230>
 8002e44:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8003038 <__ieee754_rem_pio2f+0x234>
 8002e48:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8002e4c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800303c <__ieee754_rem_pio2f+0x238>
 8002e50:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002e54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e58:	edc0 6a00 	vstr	s13, [r0]
 8002e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e60:	edc0 7a01 	vstr	s15, [r0, #4]
 8002e64:	2001      	movs	r0, #1
 8002e66:	b007      	add	sp, #28
 8002e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e6a:	429c      	cmp	r4, r3
 8002e6c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8002e70:	bf09      	itett	eq
 8002e72:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8003034 <__ieee754_rem_pio2f+0x230>
 8002e76:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8003038 <__ieee754_rem_pio2f+0x234>
 8002e7a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8002e7e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800303c <__ieee754_rem_pio2f+0x238>
 8002e82:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002e86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e8a:	edc0 6a00 	vstr	s13, [r0]
 8002e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e92:	edc0 7a01 	vstr	s15, [r0, #4]
 8002e96:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9a:	e7e4      	b.n	8002e66 <__ieee754_rem_pio2f+0x62>
 8002e9c:	4b68      	ldr	r3, [pc, #416]	; (8003040 <__ieee754_rem_pio2f+0x23c>)
 8002e9e:	429c      	cmp	r4, r3
 8002ea0:	dc71      	bgt.n	8002f86 <__ieee754_rem_pio2f+0x182>
 8002ea2:	f000 fc03 	bl	80036ac <fabsf>
 8002ea6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003044 <__ieee754_rem_pio2f+0x240>
 8002eaa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002eae:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002eba:	ee17 0a90 	vmov	r0, s15
 8002ebe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800302c <__ieee754_rem_pio2f+0x228>
 8002ec2:	eeb1 7a46 	vneg.f32	s14, s12
 8002ec6:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002eca:	281f      	cmp	r0, #31
 8002ecc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003038 <__ieee754_rem_pio2f+0x234>
 8002ed0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ed4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002ed8:	ee16 3a90 	vmov	r3, s13
 8002edc:	dc1c      	bgt.n	8002f18 <__ieee754_rem_pio2f+0x114>
 8002ede:	1e47      	subs	r7, r0, #1
 8002ee0:	4959      	ldr	r1, [pc, #356]	; (8003048 <__ieee754_rem_pio2f+0x244>)
 8002ee2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8002ee6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8002eea:	428a      	cmp	r2, r1
 8002eec:	d014      	beq.n	8002f18 <__ieee754_rem_pio2f+0x114>
 8002eee:	602b      	str	r3, [r5, #0]
 8002ef0:	ed95 7a00 	vldr	s14, [r5]
 8002ef4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002ef8:	2e00      	cmp	r6, #0
 8002efa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002efe:	ed85 0a01 	vstr	s0, [r5, #4]
 8002f02:	dab0      	bge.n	8002e66 <__ieee754_rem_pio2f+0x62>
 8002f04:	eeb1 7a47 	vneg.f32	s14, s14
 8002f08:	eeb1 0a40 	vneg.f32	s0, s0
 8002f0c:	ed85 7a00 	vstr	s14, [r5]
 8002f10:	ed85 0a01 	vstr	s0, [r5, #4]
 8002f14:	4240      	negs	r0, r0
 8002f16:	e7a6      	b.n	8002e66 <__ieee754_rem_pio2f+0x62>
 8002f18:	15e4      	asrs	r4, r4, #23
 8002f1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002f1e:	1aa2      	subs	r2, r4, r2
 8002f20:	2a08      	cmp	r2, #8
 8002f22:	dde4      	ble.n	8002eee <__ieee754_rem_pio2f+0xea>
 8002f24:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003034 <__ieee754_rem_pio2f+0x230>
 8002f28:	eef0 6a40 	vmov.f32	s13, s0
 8002f2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002f30:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002f34:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002f38:	eddf 7a40 	vldr	s15, [pc, #256]	; 800303c <__ieee754_rem_pio2f+0x238>
 8002f3c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8002f40:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8002f44:	eef0 7a40 	vmov.f32	s15, s0
 8002f48:	ee15 3a90 	vmov	r3, s11
 8002f4c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002f50:	1aa4      	subs	r4, r4, r2
 8002f52:	2c19      	cmp	r4, #25
 8002f54:	dc04      	bgt.n	8002f60 <__ieee754_rem_pio2f+0x15c>
 8002f56:	edc5 5a00 	vstr	s11, [r5]
 8002f5a:	eeb0 0a66 	vmov.f32	s0, s13
 8002f5e:	e7c7      	b.n	8002ef0 <__ieee754_rem_pio2f+0xec>
 8002f60:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800304c <__ieee754_rem_pio2f+0x248>
 8002f64:	eeb0 0a66 	vmov.f32	s0, s13
 8002f68:	eea7 0a25 	vfma.f32	s0, s14, s11
 8002f6c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8002f70:	eee7 7a25 	vfma.f32	s15, s14, s11
 8002f74:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003050 <__ieee754_rem_pio2f+0x24c>
 8002f78:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8002f7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002f80:	ed85 7a00 	vstr	s14, [r5]
 8002f84:	e7b4      	b.n	8002ef0 <__ieee754_rem_pio2f+0xec>
 8002f86:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002f8a:	db06      	blt.n	8002f9a <__ieee754_rem_pio2f+0x196>
 8002f8c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002f90:	edc0 7a01 	vstr	s15, [r0, #4]
 8002f94:	edc0 7a00 	vstr	s15, [r0]
 8002f98:	e742      	b.n	8002e20 <__ieee754_rem_pio2f+0x1c>
 8002f9a:	15e2      	asrs	r2, r4, #23
 8002f9c:	3a86      	subs	r2, #134	; 0x86
 8002f9e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002faa:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003054 <__ieee754_rem_pio2f+0x250>
 8002fae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002fb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fb6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8002fba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002fc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002fc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fca:	ed8d 7a04 	vstr	s14, [sp, #16]
 8002fce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fda:	edcd 7a05 	vstr	s15, [sp, #20]
 8002fde:	d11e      	bne.n	800301e <__ieee754_rem_pio2f+0x21a>
 8002fe0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2302      	movne	r3, #2
 8002fee:	491a      	ldr	r1, [pc, #104]	; (8003058 <__ieee754_rem_pio2f+0x254>)
 8002ff0:	9101      	str	r1, [sp, #4]
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	9100      	str	r1, [sp, #0]
 8002ff6:	a803      	add	r0, sp, #12
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	f000 f88d 	bl	8003118 <__kernel_rem_pio2f>
 8002ffe:	2e00      	cmp	r6, #0
 8003000:	f6bf af31 	bge.w	8002e66 <__ieee754_rem_pio2f+0x62>
 8003004:	edd5 7a00 	vldr	s15, [r5]
 8003008:	eef1 7a67 	vneg.f32	s15, s15
 800300c:	edc5 7a00 	vstr	s15, [r5]
 8003010:	edd5 7a01 	vldr	s15, [r5, #4]
 8003014:	eef1 7a67 	vneg.f32	s15, s15
 8003018:	edc5 7a01 	vstr	s15, [r5, #4]
 800301c:	e77a      	b.n	8002f14 <__ieee754_rem_pio2f+0x110>
 800301e:	2303      	movs	r3, #3
 8003020:	e7e5      	b.n	8002fee <__ieee754_rem_pio2f+0x1ea>
 8003022:	bf00      	nop
 8003024:	3f490fd8 	.word	0x3f490fd8
 8003028:	4016cbe3 	.word	0x4016cbe3
 800302c:	3fc90f80 	.word	0x3fc90f80
 8003030:	3fc90fd0 	.word	0x3fc90fd0
 8003034:	37354400 	.word	0x37354400
 8003038:	37354443 	.word	0x37354443
 800303c:	2e85a308 	.word	0x2e85a308
 8003040:	43490f80 	.word	0x43490f80
 8003044:	3f22f984 	.word	0x3f22f984
 8003048:	080038b0 	.word	0x080038b0
 800304c:	2e85a300 	.word	0x2e85a300
 8003050:	248d3132 	.word	0x248d3132
 8003054:	43800000 	.word	0x43800000
 8003058:	08003930 	.word	0x08003930

0800305c <__kernel_cosf>:
 800305c:	ee10 3a10 	vmov	r3, s0
 8003060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003064:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800306c:	da05      	bge.n	800307a <__kernel_cosf+0x1e>
 800306e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003072:	ee17 2a90 	vmov	r2, s15
 8003076:	2a00      	cmp	r2, #0
 8003078:	d03b      	beq.n	80030f2 <__kernel_cosf+0x96>
 800307a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800307e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003082:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030f8 <__kernel_cosf+0x9c>
 8003086:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <__kernel_cosf+0xa0>)
 8003088:	ee66 7a07 	vmul.f32	s15, s12, s14
 800308c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003100 <__kernel_cosf+0xa4>
 8003090:	eea6 7a25 	vfma.f32	s14, s12, s11
 8003094:	4293      	cmp	r3, r2
 8003096:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8003104 <__kernel_cosf+0xa8>
 800309a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800309e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003108 <__kernel_cosf+0xac>
 80030a2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80030a6:	eddf 5a19 	vldr	s11, [pc, #100]	; 800310c <__kernel_cosf+0xb0>
 80030aa:	eee7 5a06 	vfma.f32	s11, s14, s12
 80030ae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003110 <__kernel_cosf+0xb4>
 80030b2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80030b6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80030ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80030be:	eee6 0a07 	vfma.f32	s1, s12, s14
 80030c2:	dc04      	bgt.n	80030ce <__kernel_cosf+0x72>
 80030c4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80030c8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80030cc:	4770      	bx	lr
 80030ce:	4a11      	ldr	r2, [pc, #68]	; (8003114 <__kernel_cosf+0xb8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	bfda      	itte	le
 80030d4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80030d8:	ee07 3a10 	vmovle	s14, r3
 80030dc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80030e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030e4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80030e8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80030ec:	ee30 0a67 	vsub.f32	s0, s0, s15
 80030f0:	4770      	bx	lr
 80030f2:	eeb0 0a66 	vmov.f32	s0, s13
 80030f6:	4770      	bx	lr
 80030f8:	ad47d74e 	.word	0xad47d74e
 80030fc:	3e999999 	.word	0x3e999999
 8003100:	310f74f6 	.word	0x310f74f6
 8003104:	b493f27c 	.word	0xb493f27c
 8003108:	37d00d01 	.word	0x37d00d01
 800310c:	bab60b61 	.word	0xbab60b61
 8003110:	3d2aaaab 	.word	0x3d2aaaab
 8003114:	3f480000 	.word	0x3f480000

08003118 <__kernel_rem_pio2f>:
 8003118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311c:	ed2d 8b04 	vpush	{d8-d9}
 8003120:	b0d7      	sub	sp, #348	; 0x15c
 8003122:	469b      	mov	fp, r3
 8003124:	460e      	mov	r6, r1
 8003126:	4bbe      	ldr	r3, [pc, #760]	; (8003420 <__kernel_rem_pio2f+0x308>)
 8003128:	9964      	ldr	r1, [sp, #400]	; 0x190
 800312a:	9002      	str	r0, [sp, #8]
 800312c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8003130:	9865      	ldr	r0, [sp, #404]	; 0x194
 8003132:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003430 <__kernel_rem_pio2f+0x318>
 8003136:	1ed1      	subs	r1, r2, #3
 8003138:	2308      	movs	r3, #8
 800313a:	fb91 f1f3 	sdiv	r1, r1, r3
 800313e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8003142:	f10b 3aff 	add.w	sl, fp, #4294967295
 8003146:	1c4c      	adds	r4, r1, #1
 8003148:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800314c:	eba1 050a 	sub.w	r5, r1, sl
 8003150:	aa1a      	add	r2, sp, #104	; 0x68
 8003152:	eb09 070a 	add.w	r7, r9, sl
 8003156:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800315a:	4696      	mov	lr, r2
 800315c:	2300      	movs	r3, #0
 800315e:	42bb      	cmp	r3, r7
 8003160:	dd0f      	ble.n	8003182 <__kernel_rem_pio2f+0x6a>
 8003162:	af42      	add	r7, sp, #264	; 0x108
 8003164:	2200      	movs	r2, #0
 8003166:	454a      	cmp	r2, r9
 8003168:	dc27      	bgt.n	80031ba <__kernel_rem_pio2f+0xa2>
 800316a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800316e:	eb0b 0302 	add.w	r3, fp, r2
 8003172:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8003176:	9d02      	ldr	r5, [sp, #8]
 8003178:	eddf 7aad 	vldr	s15, [pc, #692]	; 8003430 <__kernel_rem_pio2f+0x318>
 800317c:	f04f 0c00 	mov.w	ip, #0
 8003180:	e015      	b.n	80031ae <__kernel_rem_pio2f+0x96>
 8003182:	42dd      	cmn	r5, r3
 8003184:	bf5d      	ittte	pl
 8003186:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800318a:	ee07 2a90 	vmovpl	s15, r2
 800318e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003192:	eef0 7a47 	vmovmi.f32	s15, s14
 8003196:	ecee 7a01 	vstmia	lr!, {s15}
 800319a:	3301      	adds	r3, #1
 800319c:	e7df      	b.n	800315e <__kernel_rem_pio2f+0x46>
 800319e:	ecf5 6a01 	vldmia	r5!, {s13}
 80031a2:	ed33 7a01 	vldmdb	r3!, {s14}
 80031a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80031aa:	f10c 0c01 	add.w	ip, ip, #1
 80031ae:	45d4      	cmp	ip, sl
 80031b0:	ddf5      	ble.n	800319e <__kernel_rem_pio2f+0x86>
 80031b2:	ece7 7a01 	vstmia	r7!, {s15}
 80031b6:	3201      	adds	r2, #1
 80031b8:	e7d5      	b.n	8003166 <__kernel_rem_pio2f+0x4e>
 80031ba:	ab06      	add	r3, sp, #24
 80031bc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80031c0:	9304      	str	r3, [sp, #16]
 80031c2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800342c <__kernel_rem_pio2f+0x314>
 80031c6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8003428 <__kernel_rem_pio2f+0x310>
 80031ca:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80031ce:	9303      	str	r3, [sp, #12]
 80031d0:	464d      	mov	r5, r9
 80031d2:	ab56      	add	r3, sp, #344	; 0x158
 80031d4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80031d8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80031dc:	3f01      	subs	r7, #1
 80031de:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80031e2:	00bf      	lsls	r7, r7, #2
 80031e4:	ab56      	add	r3, sp, #344	; 0x158
 80031e6:	19da      	adds	r2, r3, r7
 80031e8:	3a4c      	subs	r2, #76	; 0x4c
 80031ea:	2300      	movs	r3, #0
 80031ec:	1ae9      	subs	r1, r5, r3
 80031ee:	2900      	cmp	r1, #0
 80031f0:	dc4c      	bgt.n	800328c <__kernel_rem_pio2f+0x174>
 80031f2:	4620      	mov	r0, r4
 80031f4:	f000 faa4 	bl	8003740 <scalbnf>
 80031f8:	eeb0 8a40 	vmov.f32	s16, s0
 80031fc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8003200:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003204:	f000 fa5a 	bl	80036bc <floorf>
 8003208:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800320c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003210:	2c00      	cmp	r4, #0
 8003212:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003216:	edcd 7a01 	vstr	s15, [sp, #4]
 800321a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003222:	dd48      	ble.n	80032b6 <__kernel_rem_pio2f+0x19e>
 8003224:	1e69      	subs	r1, r5, #1
 8003226:	ab06      	add	r3, sp, #24
 8003228:	f1c4 0008 	rsb	r0, r4, #8
 800322c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8003230:	9a01      	ldr	r2, [sp, #4]
 8003232:	fa4c f300 	asr.w	r3, ip, r0
 8003236:	441a      	add	r2, r3
 8003238:	4083      	lsls	r3, r0
 800323a:	9201      	str	r2, [sp, #4]
 800323c:	ebac 0203 	sub.w	r2, ip, r3
 8003240:	ab06      	add	r3, sp, #24
 8003242:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8003246:	f1c4 0307 	rsb	r3, r4, #7
 800324a:	fa42 f803 	asr.w	r8, r2, r3
 800324e:	f1b8 0f00 	cmp.w	r8, #0
 8003252:	dd41      	ble.n	80032d8 <__kernel_rem_pio2f+0x1c0>
 8003254:	9b01      	ldr	r3, [sp, #4]
 8003256:	2000      	movs	r0, #0
 8003258:	3301      	adds	r3, #1
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	4601      	mov	r1, r0
 800325e:	4285      	cmp	r5, r0
 8003260:	dc6d      	bgt.n	800333e <__kernel_rem_pio2f+0x226>
 8003262:	2c00      	cmp	r4, #0
 8003264:	dd04      	ble.n	8003270 <__kernel_rem_pio2f+0x158>
 8003266:	2c01      	cmp	r4, #1
 8003268:	d07e      	beq.n	8003368 <__kernel_rem_pio2f+0x250>
 800326a:	2c02      	cmp	r4, #2
 800326c:	f000 8086 	beq.w	800337c <__kernel_rem_pio2f+0x264>
 8003270:	f1b8 0f02 	cmp.w	r8, #2
 8003274:	d130      	bne.n	80032d8 <__kernel_rem_pio2f+0x1c0>
 8003276:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800327a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800327e:	b359      	cbz	r1, 80032d8 <__kernel_rem_pio2f+0x1c0>
 8003280:	4620      	mov	r0, r4
 8003282:	f000 fa5d 	bl	8003740 <scalbnf>
 8003286:	ee38 8a40 	vsub.f32	s16, s16, s0
 800328a:	e025      	b.n	80032d8 <__kernel_rem_pio2f+0x1c0>
 800328c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003290:	a806      	add	r0, sp, #24
 8003292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800329a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800329e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80032a2:	ee10 1a10 	vmov	r1, s0
 80032a6:	ed32 0a01 	vldmdb	r2!, {s0}
 80032aa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80032ae:	ee37 0a80 	vadd.f32	s0, s15, s0
 80032b2:	3301      	adds	r3, #1
 80032b4:	e79a      	b.n	80031ec <__kernel_rem_pio2f+0xd4>
 80032b6:	d106      	bne.n	80032c6 <__kernel_rem_pio2f+0x1ae>
 80032b8:	1e6b      	subs	r3, r5, #1
 80032ba:	aa06      	add	r2, sp, #24
 80032bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032c0:	ea4f 2822 	mov.w	r8, r2, asr #8
 80032c4:	e7c3      	b.n	800324e <__kernel_rem_pio2f+0x136>
 80032c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80032ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	da31      	bge.n	8003338 <__kernel_rem_pio2f+0x220>
 80032d4:	f04f 0800 	mov.w	r8, #0
 80032d8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80032dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e0:	f040 80a8 	bne.w	8003434 <__kernel_rem_pio2f+0x31c>
 80032e4:	1e6b      	subs	r3, r5, #1
 80032e6:	4618      	mov	r0, r3
 80032e8:	2200      	movs	r2, #0
 80032ea:	4548      	cmp	r0, r9
 80032ec:	da4d      	bge.n	800338a <__kernel_rem_pio2f+0x272>
 80032ee:	2a00      	cmp	r2, #0
 80032f0:	f000 8087 	beq.w	8003402 <__kernel_rem_pio2f+0x2ea>
 80032f4:	aa06      	add	r2, sp, #24
 80032f6:	3c08      	subs	r4, #8
 80032f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032fc:	2900      	cmp	r1, #0
 80032fe:	f000 808d 	beq.w	800341c <__kernel_rem_pio2f+0x304>
 8003302:	4620      	mov	r0, r4
 8003304:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003308:	9302      	str	r3, [sp, #8]
 800330a:	f000 fa19 	bl	8003740 <scalbnf>
 800330e:	9b02      	ldr	r3, [sp, #8]
 8003310:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800342c <__kernel_rem_pio2f+0x314>
 8003314:	0099      	lsls	r1, r3, #2
 8003316:	aa42      	add	r2, sp, #264	; 0x108
 8003318:	1850      	adds	r0, r2, r1
 800331a:	1d05      	adds	r5, r0, #4
 800331c:	461c      	mov	r4, r3
 800331e:	2c00      	cmp	r4, #0
 8003320:	f280 80b8 	bge.w	8003494 <__kernel_rem_pio2f+0x37c>
 8003324:	2500      	movs	r5, #0
 8003326:	1b5c      	subs	r4, r3, r5
 8003328:	2c00      	cmp	r4, #0
 800332a:	f2c0 80d8 	blt.w	80034de <__kernel_rem_pio2f+0x3c6>
 800332e:	4f3d      	ldr	r7, [pc, #244]	; (8003424 <__kernel_rem_pio2f+0x30c>)
 8003330:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8003430 <__kernel_rem_pio2f+0x318>
 8003334:	2400      	movs	r4, #0
 8003336:	e0c6      	b.n	80034c6 <__kernel_rem_pio2f+0x3ae>
 8003338:	f04f 0802 	mov.w	r8, #2
 800333c:	e78a      	b.n	8003254 <__kernel_rem_pio2f+0x13c>
 800333e:	ab06      	add	r3, sp, #24
 8003340:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003344:	b949      	cbnz	r1, 800335a <__kernel_rem_pio2f+0x242>
 8003346:	b12b      	cbz	r3, 8003354 <__kernel_rem_pio2f+0x23c>
 8003348:	aa06      	add	r2, sp, #24
 800334a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800334e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003352:	2301      	movs	r3, #1
 8003354:	3001      	adds	r0, #1
 8003356:	4619      	mov	r1, r3
 8003358:	e781      	b.n	800325e <__kernel_rem_pio2f+0x146>
 800335a:	aa06      	add	r2, sp, #24
 800335c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003360:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003364:	460b      	mov	r3, r1
 8003366:	e7f5      	b.n	8003354 <__kernel_rem_pio2f+0x23c>
 8003368:	1e68      	subs	r0, r5, #1
 800336a:	ab06      	add	r3, sp, #24
 800336c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003374:	aa06      	add	r2, sp, #24
 8003376:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800337a:	e779      	b.n	8003270 <__kernel_rem_pio2f+0x158>
 800337c:	1e68      	subs	r0, r5, #1
 800337e:	ab06      	add	r3, sp, #24
 8003380:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003388:	e7f4      	b.n	8003374 <__kernel_rem_pio2f+0x25c>
 800338a:	a906      	add	r1, sp, #24
 800338c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003390:	3801      	subs	r0, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	e7a9      	b.n	80032ea <__kernel_rem_pio2f+0x1d2>
 8003396:	f10c 0c01 	add.w	ip, ip, #1
 800339a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800339e:	2a00      	cmp	r2, #0
 80033a0:	d0f9      	beq.n	8003396 <__kernel_rem_pio2f+0x27e>
 80033a2:	eb0b 0305 	add.w	r3, fp, r5
 80033a6:	aa1a      	add	r2, sp, #104	; 0x68
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	1898      	adds	r0, r3, r2
 80033ac:	3004      	adds	r0, #4
 80033ae:	1c69      	adds	r1, r5, #1
 80033b0:	3704      	adds	r7, #4
 80033b2:	2200      	movs	r2, #0
 80033b4:	4465      	add	r5, ip
 80033b6:	9005      	str	r0, [sp, #20]
 80033b8:	428d      	cmp	r5, r1
 80033ba:	f6ff af0a 	blt.w	80031d2 <__kernel_rem_pio2f+0xba>
 80033be:	a81a      	add	r0, sp, #104	; 0x68
 80033c0:	eb02 0c03 	add.w	ip, r2, r3
 80033c4:	4484      	add	ip, r0
 80033c6:	9803      	ldr	r0, [sp, #12]
 80033c8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80033cc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80033d0:	9001      	str	r0, [sp, #4]
 80033d2:	ee07 0a90 	vmov	s15, r0
 80033d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033da:	9805      	ldr	r0, [sp, #20]
 80033dc:	edcc 7a00 	vstr	s15, [ip]
 80033e0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8003430 <__kernel_rem_pio2f+0x318>
 80033e4:	eb00 0802 	add.w	r8, r0, r2
 80033e8:	f04f 0c00 	mov.w	ip, #0
 80033ec:	45d4      	cmp	ip, sl
 80033ee:	dd0c      	ble.n	800340a <__kernel_rem_pio2f+0x2f2>
 80033f0:	eb02 0c07 	add.w	ip, r2, r7
 80033f4:	a842      	add	r0, sp, #264	; 0x108
 80033f6:	4484      	add	ip, r0
 80033f8:	edcc 7a01 	vstr	s15, [ip, #4]
 80033fc:	3101      	adds	r1, #1
 80033fe:	3204      	adds	r2, #4
 8003400:	e7da      	b.n	80033b8 <__kernel_rem_pio2f+0x2a0>
 8003402:	9b04      	ldr	r3, [sp, #16]
 8003404:	f04f 0c01 	mov.w	ip, #1
 8003408:	e7c7      	b.n	800339a <__kernel_rem_pio2f+0x282>
 800340a:	ecfe 6a01 	vldmia	lr!, {s13}
 800340e:	ed38 7a01 	vldmdb	r8!, {s14}
 8003412:	f10c 0c01 	add.w	ip, ip, #1
 8003416:	eee6 7a87 	vfma.f32	s15, s13, s14
 800341a:	e7e7      	b.n	80033ec <__kernel_rem_pio2f+0x2d4>
 800341c:	3b01      	subs	r3, #1
 800341e:	e769      	b.n	80032f4 <__kernel_rem_pio2f+0x1dc>
 8003420:	08003c74 	.word	0x08003c74
 8003424:	08003c48 	.word	0x08003c48
 8003428:	43800000 	.word	0x43800000
 800342c:	3b800000 	.word	0x3b800000
 8003430:	00000000 	.word	0x00000000
 8003434:	4260      	negs	r0, r4
 8003436:	eeb0 0a48 	vmov.f32	s0, s16
 800343a:	f000 f981 	bl	8003740 <scalbnf>
 800343e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8003428 <__kernel_rem_pio2f+0x310>
 8003442:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344a:	db1a      	blt.n	8003482 <__kernel_rem_pio2f+0x36a>
 800344c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800342c <__kernel_rem_pio2f+0x314>
 8003450:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003454:	aa06      	add	r2, sp, #24
 8003456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800345a:	a906      	add	r1, sp, #24
 800345c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003460:	3408      	adds	r4, #8
 8003462:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800346a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800346e:	ee10 3a10 	vmov	r3, s0
 8003472:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8003476:	1c6b      	adds	r3, r5, #1
 8003478:	ee17 2a90 	vmov	r2, s15
 800347c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003480:	e73f      	b.n	8003302 <__kernel_rem_pio2f+0x1ea>
 8003482:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003486:	aa06      	add	r2, sp, #24
 8003488:	ee10 3a10 	vmov	r3, s0
 800348c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8003490:	462b      	mov	r3, r5
 8003492:	e736      	b.n	8003302 <__kernel_rem_pio2f+0x1ea>
 8003494:	aa06      	add	r2, sp, #24
 8003496:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800349a:	9202      	str	r2, [sp, #8]
 800349c:	ee07 2a90 	vmov	s15, r2
 80034a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a4:	3c01      	subs	r4, #1
 80034a6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80034aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80034ae:	ed65 7a01 	vstmdb	r5!, {s15}
 80034b2:	e734      	b.n	800331e <__kernel_rem_pio2f+0x206>
 80034b4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80034b8:	ecf7 6a01 	vldmia	r7!, {s13}
 80034bc:	ed9c 7a00 	vldr	s14, [ip]
 80034c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80034c4:	3401      	adds	r4, #1
 80034c6:	454c      	cmp	r4, r9
 80034c8:	dc01      	bgt.n	80034ce <__kernel_rem_pio2f+0x3b6>
 80034ca:	42a5      	cmp	r5, r4
 80034cc:	daf2      	bge.n	80034b4 <__kernel_rem_pio2f+0x39c>
 80034ce:	aa56      	add	r2, sp, #344	; 0x158
 80034d0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80034d4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80034d8:	3501      	adds	r5, #1
 80034da:	3804      	subs	r0, #4
 80034dc:	e723      	b.n	8003326 <__kernel_rem_pio2f+0x20e>
 80034de:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80034e0:	2a03      	cmp	r2, #3
 80034e2:	d84d      	bhi.n	8003580 <__kernel_rem_pio2f+0x468>
 80034e4:	e8df f002 	tbb	[pc, r2]
 80034e8:	021f1f3e 	.word	0x021f1f3e
 80034ec:	aa56      	add	r2, sp, #344	; 0x158
 80034ee:	4411      	add	r1, r2
 80034f0:	399c      	subs	r1, #156	; 0x9c
 80034f2:	4608      	mov	r0, r1
 80034f4:	461c      	mov	r4, r3
 80034f6:	2c00      	cmp	r4, #0
 80034f8:	dc5f      	bgt.n	80035ba <__kernel_rem_pio2f+0x4a2>
 80034fa:	4608      	mov	r0, r1
 80034fc:	461c      	mov	r4, r3
 80034fe:	2c01      	cmp	r4, #1
 8003500:	dc6b      	bgt.n	80035da <__kernel_rem_pio2f+0x4c2>
 8003502:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8003430 <__kernel_rem_pio2f+0x318>
 8003506:	2b01      	cmp	r3, #1
 8003508:	dc77      	bgt.n	80035fa <__kernel_rem_pio2f+0x4e2>
 800350a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800350e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8003512:	f1b8 0f00 	cmp.w	r8, #0
 8003516:	d176      	bne.n	8003606 <__kernel_rem_pio2f+0x4ee>
 8003518:	edc6 6a00 	vstr	s13, [r6]
 800351c:	ed86 7a01 	vstr	s14, [r6, #4]
 8003520:	edc6 7a02 	vstr	s15, [r6, #8]
 8003524:	e02c      	b.n	8003580 <__kernel_rem_pio2f+0x468>
 8003526:	aa56      	add	r2, sp, #344	; 0x158
 8003528:	4411      	add	r1, r2
 800352a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8003430 <__kernel_rem_pio2f+0x318>
 800352e:	399c      	subs	r1, #156	; 0x9c
 8003530:	4618      	mov	r0, r3
 8003532:	2800      	cmp	r0, #0
 8003534:	da32      	bge.n	800359c <__kernel_rem_pio2f+0x484>
 8003536:	f1b8 0f00 	cmp.w	r8, #0
 800353a:	d035      	beq.n	80035a8 <__kernel_rem_pio2f+0x490>
 800353c:	eef1 7a47 	vneg.f32	s15, s14
 8003540:	edc6 7a00 	vstr	s15, [r6]
 8003544:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8003548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800354c:	a82f      	add	r0, sp, #188	; 0xbc
 800354e:	2101      	movs	r1, #1
 8003550:	428b      	cmp	r3, r1
 8003552:	da2c      	bge.n	80035ae <__kernel_rem_pio2f+0x496>
 8003554:	f1b8 0f00 	cmp.w	r8, #0
 8003558:	d001      	beq.n	800355e <__kernel_rem_pio2f+0x446>
 800355a:	eef1 7a67 	vneg.f32	s15, s15
 800355e:	edc6 7a01 	vstr	s15, [r6, #4]
 8003562:	e00d      	b.n	8003580 <__kernel_rem_pio2f+0x468>
 8003564:	aa56      	add	r2, sp, #344	; 0x158
 8003566:	4411      	add	r1, r2
 8003568:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8003430 <__kernel_rem_pio2f+0x318>
 800356c:	399c      	subs	r1, #156	; 0x9c
 800356e:	2b00      	cmp	r3, #0
 8003570:	da0e      	bge.n	8003590 <__kernel_rem_pio2f+0x478>
 8003572:	f1b8 0f00 	cmp.w	r8, #0
 8003576:	d001      	beq.n	800357c <__kernel_rem_pio2f+0x464>
 8003578:	eef1 7a67 	vneg.f32	s15, s15
 800357c:	edc6 7a00 	vstr	s15, [r6]
 8003580:	9b01      	ldr	r3, [sp, #4]
 8003582:	f003 0007 	and.w	r0, r3, #7
 8003586:	b057      	add	sp, #348	; 0x15c
 8003588:	ecbd 8b04 	vpop	{d8-d9}
 800358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003590:	ed31 7a01 	vldmdb	r1!, {s14}
 8003594:	3b01      	subs	r3, #1
 8003596:	ee77 7a87 	vadd.f32	s15, s15, s14
 800359a:	e7e8      	b.n	800356e <__kernel_rem_pio2f+0x456>
 800359c:	ed71 7a01 	vldmdb	r1!, {s15}
 80035a0:	3801      	subs	r0, #1
 80035a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035a6:	e7c4      	b.n	8003532 <__kernel_rem_pio2f+0x41a>
 80035a8:	eef0 7a47 	vmov.f32	s15, s14
 80035ac:	e7c8      	b.n	8003540 <__kernel_rem_pio2f+0x428>
 80035ae:	ecb0 7a01 	vldmia	r0!, {s14}
 80035b2:	3101      	adds	r1, #1
 80035b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035b8:	e7ca      	b.n	8003550 <__kernel_rem_pio2f+0x438>
 80035ba:	ed50 7a02 	vldr	s15, [r0, #-8]
 80035be:	ed70 6a01 	vldmdb	r0!, {s13}
 80035c2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80035c6:	3c01      	subs	r4, #1
 80035c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035cc:	ed00 7a01 	vstr	s14, [r0, #-4]
 80035d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d4:	edc0 7a00 	vstr	s15, [r0]
 80035d8:	e78d      	b.n	80034f6 <__kernel_rem_pio2f+0x3de>
 80035da:	ed50 7a02 	vldr	s15, [r0, #-8]
 80035de:	ed70 6a01 	vldmdb	r0!, {s13}
 80035e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80035e6:	3c01      	subs	r4, #1
 80035e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035ec:	ed00 7a01 	vstr	s14, [r0, #-4]
 80035f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f4:	edc0 7a00 	vstr	s15, [r0]
 80035f8:	e781      	b.n	80034fe <__kernel_rem_pio2f+0x3e6>
 80035fa:	ed31 7a01 	vldmdb	r1!, {s14}
 80035fe:	3b01      	subs	r3, #1
 8003600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003604:	e77f      	b.n	8003506 <__kernel_rem_pio2f+0x3ee>
 8003606:	eef1 6a66 	vneg.f32	s13, s13
 800360a:	eeb1 7a47 	vneg.f32	s14, s14
 800360e:	edc6 6a00 	vstr	s13, [r6]
 8003612:	ed86 7a01 	vstr	s14, [r6, #4]
 8003616:	eef1 7a67 	vneg.f32	s15, s15
 800361a:	e781      	b.n	8003520 <__kernel_rem_pio2f+0x408>

0800361c <__kernel_sinf>:
 800361c:	ee10 3a10 	vmov	r3, s0
 8003620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003624:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003628:	da04      	bge.n	8003634 <__kernel_sinf+0x18>
 800362a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800362e:	ee17 3a90 	vmov	r3, s15
 8003632:	b35b      	cbz	r3, 800368c <__kernel_sinf+0x70>
 8003634:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003638:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003690 <__kernel_sinf+0x74>
 800363c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003694 <__kernel_sinf+0x78>
 8003640:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003644:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003698 <__kernel_sinf+0x7c>
 8003648:	eee6 7a07 	vfma.f32	s15, s12, s14
 800364c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800369c <__kernel_sinf+0x80>
 8003650:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003654:	eddf 7a12 	vldr	s15, [pc, #72]	; 80036a0 <__kernel_sinf+0x84>
 8003658:	ee60 6a07 	vmul.f32	s13, s0, s14
 800365c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003660:	b930      	cbnz	r0, 8003670 <__kernel_sinf+0x54>
 8003662:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80036a4 <__kernel_sinf+0x88>
 8003666:	eea7 6a27 	vfma.f32	s12, s14, s15
 800366a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800366e:	4770      	bx	lr
 8003670:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003674:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003678:	eee0 7a86 	vfma.f32	s15, s1, s12
 800367c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003680:	eddf 7a09 	vldr	s15, [pc, #36]	; 80036a8 <__kernel_sinf+0x8c>
 8003684:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003688:	ee30 0a60 	vsub.f32	s0, s0, s1
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	2f2ec9d3 	.word	0x2f2ec9d3
 8003694:	b2d72f34 	.word	0xb2d72f34
 8003698:	3638ef1b 	.word	0x3638ef1b
 800369c:	b9500d01 	.word	0xb9500d01
 80036a0:	3c088889 	.word	0x3c088889
 80036a4:	be2aaaab 	.word	0xbe2aaaab
 80036a8:	3e2aaaab 	.word	0x3e2aaaab

080036ac <fabsf>:
 80036ac:	ee10 3a10 	vmov	r3, s0
 80036b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036b4:	ee00 3a10 	vmov	s0, r3
 80036b8:	4770      	bx	lr
	...

080036bc <floorf>:
 80036bc:	ee10 3a10 	vmov	r3, s0
 80036c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80036c4:	0dca      	lsrs	r2, r1, #23
 80036c6:	3a7f      	subs	r2, #127	; 0x7f
 80036c8:	2a16      	cmp	r2, #22
 80036ca:	dc2a      	bgt.n	8003722 <floorf+0x66>
 80036cc:	2a00      	cmp	r2, #0
 80036ce:	da11      	bge.n	80036f4 <floorf+0x38>
 80036d0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003734 <floorf+0x78>
 80036d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80036d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80036dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e0:	dd05      	ble.n	80036ee <floorf+0x32>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	da23      	bge.n	800372e <floorf+0x72>
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <floorf+0x7c>)
 80036e8:	2900      	cmp	r1, #0
 80036ea:	bf18      	it	ne
 80036ec:	4613      	movne	r3, r2
 80036ee:	ee00 3a10 	vmov	s0, r3
 80036f2:	4770      	bx	lr
 80036f4:	4911      	ldr	r1, [pc, #68]	; (800373c <floorf+0x80>)
 80036f6:	4111      	asrs	r1, r2
 80036f8:	420b      	tst	r3, r1
 80036fa:	d0fa      	beq.n	80036f2 <floorf+0x36>
 80036fc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003734 <floorf+0x78>
 8003700:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003704:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370c:	ddef      	ble.n	80036ee <floorf+0x32>
 800370e:	2b00      	cmp	r3, #0
 8003710:	bfbe      	ittt	lt
 8003712:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003716:	fa40 f202 	asrlt.w	r2, r0, r2
 800371a:	189b      	addlt	r3, r3, r2
 800371c:	ea23 0301 	bic.w	r3, r3, r1
 8003720:	e7e5      	b.n	80036ee <floorf+0x32>
 8003722:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003726:	d3e4      	bcc.n	80036f2 <floorf+0x36>
 8003728:	ee30 0a00 	vadd.f32	s0, s0, s0
 800372c:	4770      	bx	lr
 800372e:	2300      	movs	r3, #0
 8003730:	e7dd      	b.n	80036ee <floorf+0x32>
 8003732:	bf00      	nop
 8003734:	7149f2ca 	.word	0x7149f2ca
 8003738:	bf800000 	.word	0xbf800000
 800373c:	007fffff 	.word	0x007fffff

08003740 <scalbnf>:
 8003740:	b508      	push	{r3, lr}
 8003742:	ee10 2a10 	vmov	r2, s0
 8003746:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800374a:	ed2d 8b02 	vpush	{d8}
 800374e:	eef0 0a40 	vmov.f32	s1, s0
 8003752:	d004      	beq.n	800375e <scalbnf+0x1e>
 8003754:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003758:	d306      	bcc.n	8003768 <scalbnf+0x28>
 800375a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800375e:	ecbd 8b02 	vpop	{d8}
 8003762:	eeb0 0a60 	vmov.f32	s0, s1
 8003766:	bd08      	pop	{r3, pc}
 8003768:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800376c:	d21c      	bcs.n	80037a8 <scalbnf+0x68>
 800376e:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <scalbnf+0xac>)
 8003770:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80037f0 <scalbnf+0xb0>
 8003774:	4298      	cmp	r0, r3
 8003776:	ee60 0a27 	vmul.f32	s1, s0, s15
 800377a:	db10      	blt.n	800379e <scalbnf+0x5e>
 800377c:	ee10 2a90 	vmov	r2, s1
 8003780:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003784:	3b19      	subs	r3, #25
 8003786:	4403      	add	r3, r0
 8003788:	2bfe      	cmp	r3, #254	; 0xfe
 800378a:	dd0f      	ble.n	80037ac <scalbnf+0x6c>
 800378c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80037f4 <scalbnf+0xb4>
 8003790:	eeb0 0a48 	vmov.f32	s0, s16
 8003794:	f000 f834 	bl	8003800 <copysignf>
 8003798:	ee60 0a08 	vmul.f32	s1, s0, s16
 800379c:	e7df      	b.n	800375e <scalbnf+0x1e>
 800379e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80037f8 <scalbnf+0xb8>
 80037a2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80037a6:	e7da      	b.n	800375e <scalbnf+0x1e>
 80037a8:	0ddb      	lsrs	r3, r3, #23
 80037aa:	e7ec      	b.n	8003786 <scalbnf+0x46>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	dd06      	ble.n	80037be <scalbnf+0x7e>
 80037b0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80037b4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80037b8:	ee00 3a90 	vmov	s1, r3
 80037bc:	e7cf      	b.n	800375e <scalbnf+0x1e>
 80037be:	f113 0f16 	cmn.w	r3, #22
 80037c2:	da06      	bge.n	80037d2 <scalbnf+0x92>
 80037c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80037c8:	4298      	cmp	r0, r3
 80037ca:	dcdf      	bgt.n	800378c <scalbnf+0x4c>
 80037cc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80037f8 <scalbnf+0xb8>
 80037d0:	e7de      	b.n	8003790 <scalbnf+0x50>
 80037d2:	3319      	adds	r3, #25
 80037d4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80037d8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80037dc:	eddf 7a07 	vldr	s15, [pc, #28]	; 80037fc <scalbnf+0xbc>
 80037e0:	ee07 3a10 	vmov	s14, r3
 80037e4:	ee67 0a27 	vmul.f32	s1, s14, s15
 80037e8:	e7b9      	b.n	800375e <scalbnf+0x1e>
 80037ea:	bf00      	nop
 80037ec:	ffff3cb0 	.word	0xffff3cb0
 80037f0:	4c000000 	.word	0x4c000000
 80037f4:	7149f2ca 	.word	0x7149f2ca
 80037f8:	0da24260 	.word	0x0da24260
 80037fc:	33000000 	.word	0x33000000

08003800 <copysignf>:
 8003800:	ee10 3a10 	vmov	r3, s0
 8003804:	ee10 2a90 	vmov	r2, s1
 8003808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800380c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003810:	4313      	orrs	r3, r2
 8003812:	ee00 3a10 	vmov	s0, r3
 8003816:	4770      	bx	lr

08003818 <__libc_init_array>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	4e0d      	ldr	r6, [pc, #52]	; (8003850 <__libc_init_array+0x38>)
 800381c:	4c0d      	ldr	r4, [pc, #52]	; (8003854 <__libc_init_array+0x3c>)
 800381e:	1ba4      	subs	r4, r4, r6
 8003820:	10a4      	asrs	r4, r4, #2
 8003822:	2500      	movs	r5, #0
 8003824:	42a5      	cmp	r5, r4
 8003826:	d109      	bne.n	800383c <__libc_init_array+0x24>
 8003828:	4e0b      	ldr	r6, [pc, #44]	; (8003858 <__libc_init_array+0x40>)
 800382a:	4c0c      	ldr	r4, [pc, #48]	; (800385c <__libc_init_array+0x44>)
 800382c:	f000 f82c 	bl	8003888 <_init>
 8003830:	1ba4      	subs	r4, r4, r6
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	2500      	movs	r5, #0
 8003836:	42a5      	cmp	r5, r4
 8003838:	d105      	bne.n	8003846 <__libc_init_array+0x2e>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003840:	4798      	blx	r3
 8003842:	3501      	adds	r5, #1
 8003844:	e7ee      	b.n	8003824 <__libc_init_array+0xc>
 8003846:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800384a:	4798      	blx	r3
 800384c:	3501      	adds	r5, #1
 800384e:	e7f2      	b.n	8003836 <__libc_init_array+0x1e>
 8003850:	08003c88 	.word	0x08003c88
 8003854:	08003c88 	.word	0x08003c88
 8003858:	08003c88 	.word	0x08003c88
 800385c:	08003c90 	.word	0x08003c90

08003860 <memcpy>:
 8003860:	b510      	push	{r4, lr}
 8003862:	1e43      	subs	r3, r0, #1
 8003864:	440a      	add	r2, r1
 8003866:	4291      	cmp	r1, r2
 8003868:	d100      	bne.n	800386c <memcpy+0xc>
 800386a:	bd10      	pop	{r4, pc}
 800386c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003874:	e7f7      	b.n	8003866 <memcpy+0x6>

08003876 <memset>:
 8003876:	4402      	add	r2, r0
 8003878:	4603      	mov	r3, r0
 800387a:	4293      	cmp	r3, r2
 800387c:	d100      	bne.n	8003880 <memset+0xa>
 800387e:	4770      	bx	lr
 8003880:	f803 1b01 	strb.w	r1, [r3], #1
 8003884:	e7f9      	b.n	800387a <memset+0x4>
	...

08003888 <_init>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	bf00      	nop
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr

08003894 <_fini>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	bf00      	nop
 8003898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389a:	bc08      	pop	{r3}
 800389c:	469e      	mov	lr, r3
 800389e:	4770      	bx	lr
